{
  "name": "一杯茶的时间，上手 Docker",
  "description": "努力工作，然后进入梦乡，“工作”和“做梦”之间好像没有任何关联；编写代码，然后部署应用，这两者似乎也是天各一边。然而果真如此吗？这篇文章将通过《盗梦空间》的方式打开 Docker，让你实现从“做梦”到“筑梦”的实质性转变。在原先的“做梦”阶段（手动配置和部署），一切都充满了随机性和不可控性，你有时甚至都无法回忆起具体做的每一步；而在“筑梦”阶段（借助 Docker），你将通过自动化、高度可重复且可追踪的方式轻松实现任何配置和部署任务。希望读完这篇文章的你，也能成为一个优秀的“筑梦师”！",
  "id": "442cc8dad3310b0aec2ea119ebc884a2",
  "created": "2020-01-01T07:17:34.647Z",
  "github": "https://github.com/tuture-dev/docker-dream",
  "topics": [
    "Docker"
  ],
  "categories": [
    "工具",
    "Docker",
    "入门"
  ],
  "cover": ".tuture/assets/cover-2.jpg",
  "articles": [
    {
      "name": "一杯茶的时间，上手 Docker",
      "id": "442cc8dad3310b0aec2ea119ebc884a2",
      "created": "2020-01-01T07:17:34.647Z",
      "cover": ".tuture/assets/cover-1.jpg",
      "topics": [
        "Docker"
      ],
      "description": "努力工作，然后进入梦乡，“工作”和“做梦”之间好像没有任何关联；编写代码，然后部署应用，这两者似乎也是天各一边。然而果真如此吗？这篇文章将通过《盗梦空间》的方式打开 Docker，让你实现从“做梦”到“筑梦”的实质性转变。在原先的“做梦”阶段（手动配置和部署），一切都充满了随机性和不可控性，你有时甚至都无法回忆起具体做的每一步；而在“筑梦”阶段（借助 Docker），你将通过自动化、高度可重复且可追踪的方式轻松实现任何配置和部署任务。希望读完这篇文章的你，也能成为一个优秀的“筑梦师”！"
    },
    {
      "name": "Docker 筑梦师系列（一）：实现容器互联",
      "id": "cd44c8468a5c475985364cae57387491",
      "created": "2020-01-12T07:17:34.647Z",
      "cover": ".tuture/assets/cover-2.jpg",
      "description": "在实际应用中，不同的服务之间是需要通信的，例如后端 API 和数据库；幸运的是，Docker 为我们提供了网络（Network）机制，能够轻松实现容器互联。这篇文章将带你轻松上手 Docker 网络，学会使用默认网络和自定义网络，成为一名能够连接多个“梦境”的筑梦师！"
    },
    {
      "id": "0X8ssR35",
      "name": "Docker 筑梦师系列（二）：上手容器数据管理",
      "created": "2020-03-06T07:17:34.647Z",
      "topics": [
        "Docker"
      ],
      "cover": ".tuture/assets/docker-cover-3.jpg",
      "description": "数据是一切应用和服务的核心，特别是目睹了一次次“删库跑路”引发的惨剧之后，我们更能深入体会到数据存储与备份的重要性。Docker 也为我们提供了方便且强大的方式去处理容器的数据。在这一篇文章中，我们将带你了解 Docker 的两种常用的数据管理方式：数据卷（Volume）和绑定挂载（Bind Mount），从而能够游刃有余地处理好数据，为你的应用提供强有力的支撑和保障。"
    }
  ],
  "steps": [
    {
      "commit": "5573938",
      "id": "t_1Hh6QV",
      "articleId": "442cc8dad3310b0aec2ea119ebc884a2",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "5573938",
          "id": "ZNRoLN6rr",
          "fixed": true,
          "children": [
            {
              "text": "准备工作"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "写在前面的话"
                }
              ],
              "id": "SmKISJSGq"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "很多朋友跟我们反馈说，“一杯茶”纯粹就是忽悠人，写那么长，怎么可能在一杯茶的时间内看完？实际上，“饮茶”的方式因人而异，不同的读者自有不同的节奏。你完全可以选择一目十行、甚至只浏览一下插图，几分钟的时间便能看完；也可以选择跟着我们一步一步动手实践，甚至在有些地方停下来思考一番，虽然需要花更多的时间，但是我们相信这份投入的时间一定是值得的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其次，我们想确认你是否是这篇文章的受众："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果你已经是每天操纵数以千计容器的 DevOps 大佬，那么很抱歉打扰了，这篇文章对你来说可能过于简单；"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果你已经比较熟悉 Docker 了，想要更多的实战操作经验，这篇文章能够较好地帮助你复习和巩固关键的知识点；"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果你只听说过 Docker，但是基本上不会用，那么这篇文章就是为你准备的！只不过友情提醒："
                    },
                    {
                      "bold": true,
                      "text": "Docker 上手略有难度，想要真正掌握需要投入足够的时间，认真读完这篇文章一定能让你有相当大的进步"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后，每个小节的结构都是"
                },
                {
                  "bold": true,
                  "text": "实战演练 + 回忆与升华"
                },
                {
                  "text": "。回忆与升华部分是笔者花了不少时间对优质资源进行搜集和整合而成，并结合了自身使用容器的经验，相信能够进一步加深你的理解，如果你赶时间的话，也可以略过哦。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "PS：这篇文章并没有像常规的 Docker 教程一样上来就郑重其事地讲 Docker 的背景、概念、优势（很有可能你已经听到耳朵生茧了hhh），而是完全通过实践的方式直观地理解 Docker。在最后，我们还是会贴出经典的 Docker 架构图，结合之前的操作体验，相信你会有了然于胸的感觉。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "OzbO1rlPW"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在正式阅读这篇文章之前，我们希望你已经具备以下条件："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最基本的命令行操作经验"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "对计算机网络有一定的了解，特别是应用层中的"
                    },
                    {
                      "bold": true,
                      "text": "端口"
                    },
                    {
                      "text": "这一概念"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最好经历过配环境、部署项目的痛苦挣扎😭"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "我们将实现什么"
                }
              ],
              "id": "z1hSV3mCR"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在假定你手头已经有了一个 React 编写的“梦想清单”项目，如下面这个动图所示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/dream-demo.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将在这篇文章中教你一步步用 Docker 将这个应用容器化，用 Nginx 服务器提供构建好的静态页面。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "你将学会"
                }
              ],
              "id": "NKxcmFdQX"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/mindnode-1.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "这篇文章不会涉及 …"
                }
              ],
              "id": "YpMOp8ITP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然咯，这篇文章作为一篇入门性质的教程，以下进阶内容不会涉及："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Docker 网络机制"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据卷和 Bind Mount 实现数据分享"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Docker Compose"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "多阶段构建（Multi-stage Build）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Docker Machine 工具"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "容器编排技术，例如 Kubernetes 以及 Docker Swarm"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "以上进阶知识我们会马上推出相关教程，敬请期待。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "安装 Docker"
                }
              ],
              "id": "0uaO8_tgF"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们推荐各个平台用以下方式安装 Docker（经过我们反复测试哦）。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "Windows"
                }
              ],
              "id": "sceJpQ5tb"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "link": true,
                  "url": "https://www.runoob.com/docker/windows-docker-install.html",
                  "text": "菜鸟教程"
                },
                {
                  "text": "中详细介绍了 Win7/8 以及 Win10 的不同推荐安装方法。注意 Win10 建议开启 Hyper-V 虚拟化技术。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "macOS"
                }
              ],
              "id": "3R9iP-BQW"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可通过点击"
                },
                {
                  "link": true,
                  "url": "https://download.docker.com/mac/stable/Docker.dmg",
                  "text": "官方下载链接"
                },
                {
                  "text": "下载并安装 DMG 文件（如果速度慢的话可以把链接复制进迅雷哦）。安装完毕之后，点击 Docker 应用图标即可打开。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "Linux"
                }
              ],
              "id": "bShT2qh8j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对于各大 Linux 发行版（Ubuntu、CentOS 等等），我们推荐用官方脚本进行安装，方便快捷："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "curl -fsSL https://get.docker.com -o get-docker.sh"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "sudo sh get-docker.sh"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后推荐将 "
                },
                {
                  "code": true,
                  "text": "docker"
                },
                {
                  "text": " 的权限移交给非 root 用户，这样使用 "
                },
                {
                  "code": true,
                  "text": "docker"
                },
                {
                  "text": " 就不需要每次都 "
                },
                {
                  "code": true,
                  "text": "sudo"
                },
                {
                  "text": " 了："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "sudo usermod -aG docker $USER"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注销用户或者重启之后就会生效。然后通过 "
                },
                {
                  "code": true,
                  "text": "systemd"
                },
                {
                  "text": " 服务配置 Docker 开机启动："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "sudo systemctl enable docker"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "配置镜像仓库"
                }
              ],
              "id": "2tE4c0k3B"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "默认的镜像仓库 Docker Hub 在国外，国内拉取速度比较感人。建议参考"
                },
                {
                  "link": true,
                  "url": "https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html",
                  "text": "这篇文章"
                },
                {
                  "text": "配置镜像加速。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/.gitignore",
          "id": "KPAWwcOpI",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/.gitignore",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "file",
          "file": "client/README.md",
          "id": "uF_bhQrU_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/README.md",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/package-lock.json",
          "id": "YaBI7fwEb",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/package-lock.json",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/package.json",
          "id": "wX3F3DEg5",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/package.json",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/public/index.html",
          "id": "dxzsm1Zc7I",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/public/index.html",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/App.js",
          "id": "uQPBjrkABT",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/App.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/Footer.js",
          "id": "xBCf5l0xzx",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Footer.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/Header.js",
          "id": "xMkpatnkNL",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Header.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/Link.js",
          "id": "wBvhHvv6t6",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/Link.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/MainSection.js",
          "id": "CmrxV0I3He",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/MainSection.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/TodoItem.js",
          "id": "kJEBk0iOnZ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/TodoItem.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/TodoList.js",
          "id": "yD3xlXPclr",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/TodoList.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/components/TodoTextInput.js",
          "id": "vOKIfpv0V_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/components/TodoTextInput.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/index.js",
          "id": "9bBFpUan5o",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/index.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/stores/todo.js",
          "id": "f3Zu6y4axt",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/stores/todo.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "client/src/utils/index.js",
          "id": "icNA-hxBQF",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/src/utils/index.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/.gitignore",
          "id": "HQa_MfpAkV",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/.gitignore",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/index.js",
          "id": "0lzq_LrQdX",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/index.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/models/Todo.js",
          "id": "nZyexly1T8",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/models/Todo.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/package-lock.json",
          "id": "FzkWm7k0SJ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/package-lock.json",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/package.json",
          "id": "1S5oBVKpKP",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/package.json",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "server/routes/todos.js",
          "id": "wUGcatMP7J",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/routes/todos.js",
              "commit": "5573938",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "镜像与容器：筑梦师的图纸和梦境"
                }
              ],
              "id": "GkZ-PQjQ_t"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "bold": true,
                  "text": "镜像"
                },
                {
                  "text": "（Image）和"
                },
                {
                  "bold": true,
                  "text": "容器"
                },
                {
                  "text": "（Container）是 Docker 中最为基础也是最为关键的两个概念，前者就是"
                },
                {
                  "bold": true,
                  "text": "筑梦师的图纸"
                },
                {
                  "text": "，根据这张图纸的内容，就能够生成"
                },
                {
                  "bold": true,
                  "text": "完全可预测的梦境"
                },
                {
                  "text": "（也就是后者）。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你觉得这个比喻难以理解，那么可以通过面向对象编程中“类”（class）和“实例”（instance）这两个概念进行类比，“类”就相当于“镜像”，“实例”就相当于“容器”。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小试牛刀：梦开始的地方"
                }
              ],
              "id": "3qjHXWyWRH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在略微接触了镜像与容器这两个基础概念之后，我们打算暂停理论的讲解，而先来一波小实验让你快速感受一下。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "实验一：Hello World!"
                }
              ],
              "id": "HF16y32Tcz"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "按照历史惯例，我们运行一下来自 Docker 的 Hello World，命令如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run hello-world"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "输出如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "text",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Unable to find image 'hello-world:latest' locally"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "latest: Pulling from library/hello-world"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "1b930d010525: Pull complete"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Digest: sha256:fb158b7ad66f4d58aa66c4455858230cd2eab4cdf29b13e5c3628a6bfc2e9f05"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Status: Downloaded newer image for hello-world:latest"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Hello from Docker!"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "..."
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不就打印了一个字符串然后退出吗，有这么神奇？其实 Docker 为我们默默做了以下事情："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "检查本地是否有指定的 "
                    },
                    {
                      "code": true,
                      "text": "hello-world:latest"
                    },
                    {
                      "text": " 镜像（"
                    },
                    {
                      "code": true,
                      "text": "latest"
                    },
                    {
                      "text": " 是镜像标签，后面会细讲），如果没有，执行第 2 步，否则直接执行第 3 步"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "本地没有指定镜像（Unable to find xxx locally），从 "
                    },
                    {
                      "link": true,
                      "url": "https://hub.docker.com/",
                      "text": "Docker Hub"
                    },
                    {
                      "text": " 下载到本地"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "根据本地的 "
                    },
                    {
                      "code": true,
                      "text": "hello-world:latest"
                    },
                    {
                      "text": " 镜像创建一个新的容器并运行其中的程序"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "运行完毕后，容器退出，控制权返回给用户"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 4
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "实验二：运行一个 Nginx 服务器"
                }
              ],
              "id": "PQ2N1VojHI"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "感觉太简单？我们来尝试一个高级一点的：运行一个 "
                },
                {
                  "link": true,
                  "url": "https://baike.baidu.com/item/nginx",
                  "text": "Nginx 服务器"
                },
                {
                  "text": "。运行以下命令"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -p 8080:80 nginx"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "运行之后，你会发现一直卡住，也没有任何输出，但放心你的电脑并没有死机。让我们打开浏览器访问 "
                },
                {
                  "code": true,
                  "text": "localhost:8080"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-nginx.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这时候熟悉 Nginx 的朋友可能就坐不住了：就一个简简单单的 "
                },
                {
                  "code": true,
                  "text": "docker run"
                },
                {
                  "text": " 命令，就搞定了 Nginx 服务器的安装和部署？？没错，你可以继续访问一些不存在的路由，比如 "
                },
                {
                  "code": true,
                  "text": "localhost:8080/what"
                },
                {
                  "text": "，同样会提示 404。这时候我们再看 Docker 容器的输出，就有内容（服务器日志）了："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-nginx-log.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "总结一下刚才 Docker 做的事情："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "检查本地是否有指定的 "
                    },
                    {
                      "code": true,
                      "text": "nginx:latest"
                    },
                    {
                      "text": " 镜像（关于 "
                    },
                    {
                      "code": true,
                      "text": "latest"
                    },
                    {
                      "text": " 标签，后面会细讲），如果没有，执行第 2 步，否则直接执行第 3 步"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "本地没有指定镜像（Unable to find xxx locally），从 "
                    },
                    {
                      "link": true,
                      "url": "https://hub.docker.com/",
                      "text": "Docker Hub"
                    },
                    {
                      "text": " 下载到本地"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "根据本地的 "
                    },
                    {
                      "code": true,
                      "text": "nginx:latest"
                    },
                    {
                      "text": " 镜像创建一个新的容器，"
                    },
                    {
                      "bold": true,
                      "text": "并通过 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "-p"
                    },
                    {
                      "bold": true,
                      "text": "（"
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "--publish"
                    },
                    {
                      "bold": true,
                      "text": "）参数建立本机的 8080 端口与容器的 80 端口之间的映射"
                    },
                    {
                      "text": "，然后运行其中的程序"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Nginx 服务器程序保持运行，容器也不会退出"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 4
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "端口映射规则的格式为 "
                    },
                    {
                      "code": true,
                      "text": "<本机端口>:<容器端口>"
                    },
                    {
                      "text": "。Nginx 容器默认开放了 80 端口，我们通过设置 "
                    },
                    {
                      "code": true,
                      "text": "8080:80"
                    },
                    {
                      "text": " 的端口映射规则，就可以在本机（容器之外）通过访问 "
                    },
                    {
                      "code": true,
                      "text": "localhost:8080"
                    },
                    {
                      "text": " 访问，甚至可以在同一局域网内通过内网 IP 访问，这篇文章的最后会演示哦。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "实验三：后台运行 Nginx"
                }
              ],
              "id": "gC7IUaTsyf"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看上去很酷，不过像 Nginx 服务器这样的进程我们更希望把它抛到后台一直运行。按 Ctrl + C 退出当前的容器，然后再次运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -p 8080:80 --name my-nginx -d nginx"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意到与之前不同的是，我们："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "加了一个参数 "
                    },
                    {
                      "code": true,
                      "text": "--name"
                    },
                    {
                      "text": "，用于指定容器名称为 "
                    },
                    {
                      "code": true,
                      "text": "my-nginx"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "加了一个选项 "
                    },
                    {
                      "code": true,
                      "text": "-d"
                    },
                    {
                      "text": "（"
                    },
                    {
                      "code": true,
                      "text": "--detach"
                    },
                    {
                      "text": "），表示“后台运行”"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "容器的名称必须是唯一的，如果已经存在同一名称的容器（即使已经不再运行）就会创建失败。如果遇到这种情况，可以删除之前不需要的容器（后面会讲解怎么删除）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Docker 会输出一串长长的 64 位容器 ID，然后把终端的控制权返回给了我们。我们试着访问 "
                },
                {
                  "code": true,
                  "text": "localhost:8080"
                },
                {
                  "text": "，还能看到那一串熟悉的 Welcome to nginx!，说明服务器真的在后台运行起来了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那我们怎么管理这个服务器呢？就像熟悉的 UNIX "
                },
                {
                  "code": true,
                  "text": "ps"
                },
                {
                  "text": " 命令一样，"
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": " 命令可以让我们查看当前容器的状态："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker ps"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "输出结果是这样的："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-ps.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "由于 "
                    },
                    {
                      "code": true,
                      "text": "docker ps"
                    },
                    {
                      "text": " 的输出比较宽，如果你觉得结果不直观的话可以把终端（命令行）拉长，如下图所示："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/docker-ps-long.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "从这张表中，就可以清晰地看到了我们在后台运行的 Nginx 服务器容器的一些信息："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "容器 ID（Container ID）为 "
                    },
                    {
                      "code": true,
                      "text": "0bddac16b8d8"
                    },
                    {
                      "text": "（你机器上的可能不一样）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "所用镜像（Image）为 "
                    },
                    {
                      "code": true,
                      "text": "nginx"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "运行命令/程序（Command）为 "
                    },
                    {
                      "code": true,
                      "text": "nginx -g 'daemon of..."
                    },
                    {
                      "text": "，这个是 Nginx 镜像自带的运行命令，暂时不用关心"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "创建时间（Created）为 45 seconds ago（45 秒钟之前）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "当前状态（Status）为 Up 44 seconds（已运行 44 秒钟）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "端口（Ports）为 "
                    },
                    {
                      "code": true,
                      "text": "0.0.0.0:8080->80/tcp"
                    },
                    {
                      "text": "，意思是访问本机的 "
                    },
                    {
                      "code": true,
                      "text": "0.0.0.0:8080"
                    },
                    {
                      "text": " 的所有请求会被转发到该容器的 TCP 80 端口"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "名称（Names）为刚才指定的 "
                    },
                    {
                      "code": true,
                      "text": "my-nginx"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果我们要让容器停下来，通过 "
                },
                {
                  "code": true,
                  "text": "docker stop"
                },
                {
                  "text": " 命令指定容器名称或 ID 进行操作即可，命令如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker stop my-nginx"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# docker stop 0bddac16b8d8"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果指定容器 ID 的话，记得要换成自己机器上真实的 ID 哦。此外，在没有冲突的情况下，ID 可以只写前几位字符，例如写 "
                    },
                    {
                      "code": true,
                      "text": "0bd"
                    },
                    {
                      "text": " 也是可以的。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "实验四：交互式运行"
                }
              ],
              "id": "u5egc6Iz16"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在过了一把 Nginx 服务器的瘾之后，我们再来体验一下 Docker 容器的另一种打开方式："
                },
                {
                  "bold": true,
                  "text": "交互式运行"
                },
                {
                  "text": "。运行以下命令，让我们进入到一个 Ubuntu 镜像中："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -it --name dreamland ubuntu"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们加了 "
                },
                {
                  "code": true,
                  "text": "-it"
                },
                {
                  "text": " 选项，等于是同时指定 "
                },
                {
                  "code": true,
                  "text": "-i"
                },
                {
                  "text": "（"
                },
                {
                  "code": true,
                  "text": "--interactive"
                },
                {
                  "text": "，交互式模式）和 "
                },
                {
                  "code": true,
                  "text": "-t"
                },
                {
                  "text": "（"
                },
                {
                  "code": true,
                  "text": "--tty"
                },
                {
                  "text": "，分配一个模拟终端） 两个选项。以上命令的输出如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "text",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Unable to find image 'ubuntu:latest' locally"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "latest: Pulling from library/ubuntu"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "2746a4a261c9: Pull complete"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "4c1d20cdee96: Pull complete"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "0d3160e1d0de: Pull complete"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "c8e37668deea: Pull complete"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Digest: sha256:9207fc49baba2e62841d610598cb2d3107ada610acd4f47252faf73ed4026480"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Status: Downloaded newer image for ubuntu:latest"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "root@94279dbf5d93:/#"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "等下，我们怎么被抛在了一个新的命令行里面？没错，你现在已经在这个 Ubuntu 镜像构筑的“梦境”之中，你可以随意地“游走”，运行一些命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "root@94279dbf5d93:/# whoami"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "root"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "root@94279dbf5d93:/# ls"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "bin   dev  home  lib64  mnt  proc  run   srv  tmp  var"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "boot  etc  lib   media  opt  root  sbin  sys  usr"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "例如我们在上面运行了 "
                },
                {
                  "code": true,
                  "text": "whoami"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "ls"
                },
                {
                  "text": " 命令，你基本上可以确定现在已经在“梦境”（容器）之中了。这时候打开一个新的终端（命令行），运行 "
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": " 命令\b，就可以看到正在运行中的 Ubuntu 镜像："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-ps-ubuntu.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "回到之前的容器中，按 Ctrl + D （或者输入 "
                },
                {
                  "code": true,
                  "text": "exit"
                },
                {
                  "text": " 命令）即可退出。你可以在之前查看 "
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": " 的终端再次检查容器是否已经被关闭了。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "销毁容器：听梦碎的声音"
                }
              ],
              "id": "l-ft1Yqcs6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "筑梦师难免会有失败的作品，而我们刚才创建的 Docker 容器也只是用于初步探索，后续不会再用到。由于 Docker 容器是直接存储在我们本地硬盘上的，及时清理容器也能够让我们的硬盘压力小一些。我们可以通过以下命令查看所有容器（包括已经停止的）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker ps -a"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "-a"
                },
                {
                  "text": "（"
                },
                {
                  "code": true,
                  "text": "--all"
                },
                {
                  "text": "）用于显示所有容器，如果不加的话只会显示"
                },
                {
                  "bold": true,
                  "text": "运行中"
                },
                {
                  "text": "的容器。可以看到输出如下（这里我把终端拉宽了，方便你看）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-ps-a.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你也许观察到，之前的实验一和实验二中我们没有指定容器名称，Docker 为我们取了颇为有趣的默认容器名称（比如 "
                    },
                    {
                      "code": true,
                      "text": "hardcore_nash"
                    },
                    {
                      "text": "），格式是一个随机的形容词加上一位著名科学家/程序员的姓氏（运气好的话，你可能会看到 Linux 之父 "
                    },
                    {
                      "code": true,
                      "text": "torvalds"
                    },
                    {
                      "text": " 哦）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类似 Shell 中的 "
                },
                {
                  "code": true,
                  "text": "rm"
                },
                {
                  "text": " 命令，我们可以通过 "
                },
                {
                  "code": true,
                  "text": "docker rm"
                },
                {
                  "text": " 命令销毁容器，例如删除我们之前创建的 "
                },
                {
                  "code": true,
                  "text": "dreamland"
                },
                {
                  "text": " 容器："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm dreamland"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者指定容器 ID，记得替换成自己机器上的"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# docker rm 94279dbf5d93"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但如果我们想要销毁所有容器怎么办？一次次输入 "
                },
                {
                  "code": true,
                  "text": "docker rm"
                },
                {
                  "text": " 删除显然不方便，可以通过以下命令轻松删除"
                },
                {
                  "bold": true,
                  "text": "所有容器"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm $(docker ps -aq)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "docker ps -aq"
                },
                {
                  "text": " 会输出所有容器的 ID，然后作为参数传给 "
                },
                {
                  "code": true,
                  "text": "docker rm"
                },
                {
                  "text": " 命令，就可以根据 ID 删除所有容器啦。"
                }
              ]
            },
            {
              "type": "note",
              "level": "danger",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "执行之前一定要仔细检查是否还有"
                    },
                    {
                      "bold": true,
                      "text": "有价值"
                    },
                    {
                      "text": "的容器（特别是业务数据），因为容器一旦删除无法再找回（这里不讨论硬盘恢复这种黑科技）！"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "回忆与升华"
                }
              ],
              "id": "ZZUd1Ky2TB"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "关于端口映射"
                }
              ],
              "id": "jRf8X2GrZU"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可能有些同学还是没有完全理解“端口映射”的概念，以 "
                },
                {
                  "code": true,
                  "text": "8080:80"
                },
                {
                  "text": " 这一条映射规则为例，我们可以用“传送门”的比喻来理解（下面的图是《传送门2》游戏的封面）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/portal.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "还是把容器比作“梦境”，把本机环境比作“现实”，通过建立端口映射，访问本机的 "
                },
                {
                  "code": true,
                  "text": "8080"
                },
                {
                  "text": " 端口的请求就会被“传送”到容器的 "
                },
                {
                  "code": true,
                  "text": "80"
                },
                {
                  "text": " 端口，是不是很神奇呢。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "容器生命周期：梦境地图"
                }
              ],
              "id": "BaEP7VpSF6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "跟着做完上面四个小实验之后，你或许已经对 Docker 容器有了非常直观的感受和理解了。是时候祭出这张十（sang）分（xin）经（bing）典（kuang）的 Docker 容器生命周期图了（来源：https://docker-saigon.github.io/post/Docker-Internals/）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/lifecycle.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这张图乍一看颇具视觉冲击力，甚至会让你感觉不知所措。没事，我们大致地解读这张图里面的四类元素："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "容器状态"
                    },
                    {
                      "text": "（带颜色的圆圈）：包括已创建（Created）、运行中（Running）、已暂停（Paused）、已停止（Stopped）以及被删除（Deleted）"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "Docker 命令"
                    },
                    {
                      "text": "（箭头上以 "
                    },
                    {
                      "code": true,
                      "text": "docker"
                    },
                    {
                      "text": " 开头的文字）：包括 "
                    },
                    {
                      "code": true,
                      "text": "docker run"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "docker create"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "docker stop"
                    },
                    {
                      "text": " 等等"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "事件"
                    },
                    {
                      "text": "（矩形框）：包括 "
                    },
                    {
                      "code": true,
                      "text": "create"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "start"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "die"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "stop"
                    },
                    {
                      "text": " 还有 "
                    },
                    {
                      "code": true,
                      "text": "OOM"
                    },
                    {
                      "text": "（内存耗尽）等等"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "还有一个条件判断，根据重启策略（Restart Policy）判断是否需要重新启动容器"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 4
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，这张图还是很难一下子理解，不过还记得刚才我们做的四个小实验吗？我们实际上走了一共两条路径（也是日常使用中走的最多的路），接下来将一一进行分析。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "第一条路径（自然结束）"
                }
              ],
              "id": "3_GeyeLyx-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/lifecycle-path1.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如上图所示："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们先通过 "
                    },
                    {
                      "code": true,
                      "text": "docker run"
                    },
                    {
                      "text": " 命令，直接创建（create）并启动（start）一个容器，进入到"
                    },
                    {
                      "bold": true,
                      "text": "运行状态"
                    },
                    {
                      "text": "（Running）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后程序运行结束（例如输出 Hello World 之后，或者通过 Ctrl + C 使得程序终止），容器死亡（die）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "由于我们没有设置重启策略，所以直接进入到"
                    },
                    {
                      "bold": true,
                      "text": "停止状态"
                    },
                    {
                      "text": "（Stopped）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后通过 "
                    },
                    {
                      "code": true,
                      "text": "docker rm"
                    },
                    {
                      "text": " 命令销毁容器，进入到"
                    },
                    {
                      "bold": true,
                      "text": "被删除状态"
                    },
                    {
                      "text": "（Deleted）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "第二条路径（强制结束）"
                }
              ],
              "id": "Jn2tj_q16j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/lifecycle-path2.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们还是通过 "
                    },
                    {
                      "code": true,
                      "text": "docker run"
                    },
                    {
                      "text": " 命令，直接创建（create）并启动（start）一个容器，进入到"
                    },
                    {
                      "bold": true,
                      "text": "运行状态"
                    },
                    {
                      "text": "（Running）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后通过 "
                    },
                    {
                      "code": true,
                      "text": "docker stop"
                    },
                    {
                      "text": " 命令杀死容器中的程序（die）并停止（stop）容器，最终进入到"
                    },
                    {
                      "bold": true,
                      "text": "停止状态"
                    },
                    {
                      "text": "（Stopped）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后通过 "
                    },
                    {
                      "code": true,
                      "text": "docker rm"
                    },
                    {
                      "text": " 命令销毁容器，进入到"
                    },
                    {
                      "bold": true,
                      "text": "被删除状态"
                    },
                    {
                      "text": "（Deleted）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有些眼尖的读者可能发现 "
                    },
                    {
                      "code": true,
                      "text": "docker kill"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "docker stop"
                    },
                    {
                      "text": " 的功能非常相似，它们之前存在细微的区别： "
                    },
                    {
                      "code": true,
                      "text": "kill"
                    },
                    {
                      "text": " 命令向容器内运行的程序直接发出 SIGKILL 信号（或其他指定信号），而 "
                    },
                    {
                      "code": true,
                      "text": "stop"
                    },
                    {
                      "text": " 则是先发出 SIGTERM 再发出 SIGKILL 信号，属于"
                    },
                    {
                      "bold": true,
                      "text": "优雅关闭"
                    },
                    {
                      "text": "（Graceful Shutdown）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "一条捷径：删除运行中的容器"
                }
              ],
              "id": "Em5FirAer8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "生命周期图其实有一条捷径没有画出来：直接从"
                },
                {
                  "bold": true,
                  "text": "运行中"
                },
                {
                  "text": "（或"
                },
                {
                  "bold": true,
                  "text": "暂停中"
                },
                {
                  "text": "）到"
                },
                {
                  "bold": true,
                  "text": "被删除"
                },
                {
                  "text": "，通过给 "
                },
                {
                  "code": true,
                  "text": "docker rm"
                },
                {
                  "text": " 命令加上选项 "
                },
                {
                  "code": true,
                  "text": "-f"
                },
                {
                  "text": "（"
                },
                {
                  "code": true,
                  "text": "--force"
                },
                {
                  "text": "，强制执行）就可以实现："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 假设 dreamland 还在运行中"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm -f dreamland"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样地，我们可以删除所有容器，无论处于什么状态："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm -f $(docker ps -aq)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "自由探索"
                }
              ],
              "id": "B1GplDTsZw"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你尽可以自由探索其他我们没走过的路线，例如尝试再次启动之前已经停止的容器（"
                },
                {
                  "code": true,
                  "text": "docker start"
                },
                {
                  "text": "），或者暂停正在运行的容器（"
                },
                {
                  "code": true,
                  "text": "docker pause"
                },
                {
                  "text": "）。幸运的是，"
                },
                {
                  "code": true,
                  "text": "docker help"
                },
                {
                  "text": " 命令可以为我们提供探索的指南针，例如我们想了解 "
                },
                {
                  "code": true,
                  "text": "start"
                },
                {
                  "text": " 命令的使用方法："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "$ docker help start"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Usage:\tdocker start [OPTIONS] CONTAINER [CONTAINER...]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Start one or more stopped containers"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Options:"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  -a, --attach                  Attach STDOUT/STDERR and forward signals"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      --checkpoint string       Restore from this checkpoint"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      --checkpoint-dir string   Use a custom checkpoint storage directory"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      --detach-keys string      Override the key sequence for"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "                                detaching a container"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  -i, --interactive             Attach container's STDIN"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "读到这里，相信你已经了解了如何利用现有的镜像创造容器，并进行管理。在接下来，我们将带你创建自己的 Docker 镜像，开始成为一名标准的“筑梦师”！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "06a33bd",
      "id": "oCIDOL5nv6",
      "articleId": "442cc8dad3310b0aec2ea119ebc884a2",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "06a33bd",
          "id": "3_HVgeIm0X",
          "fixed": true,
          "children": [
            {
              "text": "容器化第一个应用：开启筑梦之旅"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前的步骤中，我们体验了别人为我们提前准备好的镜像（例如 "
                },
                {
                  "code": true,
                  "text": "hello-world"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "nginx"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "ubuntu"
                },
                {
                  "text": "），这些镜像都可以在 "
                },
                {
                  "link": true,
                  "url": "https://hub.docker.com/",
                  "text": "Docker Hub"
                },
                {
                  "text": " 镜像仓库中找到。在这一步，我们将开始筑梦之旅：学习如何"
                },
                {
                  "bold": true,
                  "text": "容器化"
                },
                {
                  "text": "（Containerization）你的应用。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "正如开头所说，我们将容器化一个全栈的”梦想清单“应用，运行以下命令来获取代码，然后进入项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b start-point https://github.com/tuture-dev/docker-dream.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd docker-dream"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一步中，我们将容器化这个用 React 编写的前端应用，用 Nginx 来提供前端页面的访问。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "什么是容器化"
                }
              ],
              "id": "wdCBfAiAmP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "容器化包括三个阶段："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "编写代码"
                    },
                    {
                      "text": "：我们已经提供了写好的代码"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "构建镜像"
                    },
                    {
                      "text": "：也就是这一节的核心内容，下面会详细展开"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建和运行容器"
                    },
                    {
                      "text": "：通过容器的方式运行我们的应用"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        },
        {
          "file": "client/config/nginx.conf",
          "display": true,
          "commit": "06a33bd",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "构建镜像"
                    }
                  ],
                  "id": "19g9gzErBY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "构建 Docker 镜像主要包括两种方式："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "bold": true,
                          "text": "手动"
                        },
                        {
                          "text": "：根据现有的镜像创建并运行一个容器，进入其中进行修改，然后运行 "
                        },
                        {
                          "code": true,
                          "text": "docker commit"
                        },
                        {
                          "text": " 命令根据修改后的容器创建新的镜像"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "bold": true,
                          "text": "自动"
                        },
                        {
                          "text": "：创建 Dockerfile 文件，指定构建镜像的命令，然后通过 "
                        },
                        {
                          "code": true,
                          "text": "docker build"
                        },
                        {
                          "text": " 命令直接创建镜像"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 2
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "由于篇幅有限，这篇文章只会讲解"
                    },
                    {
                      "bold": true,
                      "text": "使用最为广泛"
                    },
                    {
                      "text": "的第二种创建镜像的方式。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "一些准备工作"
                    }
                  ],
                  "id": "uMZp6p7hsT"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们先把前端项目 "
                    },
                    {
                      "code": true,
                      "text": "client"
                    },
                    {
                      "text": " 构建成一个静态页面。确保你的机器上已经安装 Node 和 npm（点击"
                    },
                    {
                      "link": true,
                      "url": "https://nodejs.org/zh-cn/",
                      "text": "这里"
                    },
                    {
                      "text": "下载，或使用 "
                    },
                    {
                      "link": true,
                      "url": "https://github.com/nvm-sh/nvm",
                      "code": true,
                      "text": "nvm"
                    },
                    {
                      "text": "），然后进入到 "
                    },
                    {
                      "code": true,
                      "text": "client"
                    },
                    {
                      "text": " 目录下，安装所有依赖，并构建项目："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "cd client"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm run build"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "等待一阵子后，你应该可以看到 "
                    },
                    {
                      "code": true,
                      "text": "client/build"
                    },
                    {
                      "text": " 目录，存放了我们要展示的前端静态页面。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建 Nginx 配置文件 "
                    },
                    {
                      "code": true,
                      "text": "client/config/nginx.conf"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/config/nginx.conf",
              "commit": "06a33bd",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "不熟悉 Nginx 配置的同学不用担心哦，直接复制粘贴就可以了。上面的配置大致意思是：监听 80 端口，网页根目录在 "
                    },
                    {
                      "code": true,
                      "text": "/www"
                    },
                    {
                      "text": "，首页文件是 "
                    },
                    {
                      "code": true,
                      "text": "index.html"
                    },
                    {
                      "text": "，如果访问 "
                    },
                    {
                      "code": true,
                      "text": "/"
                    },
                    {
                      "text": " 则提供文件 "
                    },
                    {
                      "code": true,
                      "text": "index.html"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/Dockerfile",
          "display": true,
          "commit": "06a33bd",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 Dockerfile"
                    }
                  ],
                  "id": "v5_KxCEiPF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后就是这一步骤中最重要的代码：Dockerfile！创建 "
                    },
                    {
                      "code": true,
                      "text": "client/Dockerfile"
                    },
                    {
                      "text": " 文件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/Dockerfile",
              "commit": "06a33bd",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们用了 Dockerfile 中的三个指令："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "FROM"
                        },
                        {
                          "text": " 用于指定基础镜像，这里我们基于 "
                        },
                        {
                          "code": true,
                          "text": "nginx:1.13"
                        },
                        {
                          "text": " 镜像作为构建的起点"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "RUN"
                        },
                        {
                          "text": " 命令用于在容器内运行任何命令（当然前提是命令必须存在）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "COPY"
                        },
                        {
                          "text": " 命令用于从 Dockerfile 所在的目录拷贝文件到容器指定的路径"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "是时候来构建我们的镜像了，运行以下命令："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 如果你已经在 client 目录中"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "#（注意最后面有个点，代表当前目录）"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-client ."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 如果你回到了项目根目录"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-client client"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们指定了 "
                    },
                    {
                      "code": true,
                      "text": "-t"
                    },
                    {
                      "text": "（"
                    },
                    {
                      "code": true,
                      "text": "--tag"
                    },
                    {
                      "text": "，容器标签）为 "
                    },
                    {
                      "code": true,
                      "text": "dream-client"
                    },
                    {
                      "text": "，最后指定了构建容器的上下文目录（也就是 当前目录 "
                    },
                    {
                      "code": true,
                      "text": "."
                    },
                    {
                      "text": " 或 "
                    },
                    {
                      "code": true,
                      "text": "client"
                    },
                    {
                      "text": "）。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行以上的命令之后，你会发现："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "text",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "Sending build context to Docker daemon：66.6MB"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "而且这个数字还在不断变大，就像黑客科幻电影中的场景一样，最后应该停在了 290MB 左右。接着运行了一系列的 Step（4 个），然后提示镜像构建成功。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为啥这个构建上下文（Build Context）这么大？因为我们把比“黑洞”还“重”的 node_modules 也加进去了！（忍不住想起了下面这张图）"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/node_modules.jpg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "client/.dockerignore",
          "display": true,
          "commit": "06a33bd",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "使用 .dockerignore 忽略不需要的文件"
                    }
                  ],
                  "id": "6rElwTJ4Cc"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Docker 提供了类似 .gitignore 的机制，让我们可以在构建镜像时忽略特定的文件或目录。创建 "
                    },
                    {
                      "code": true,
                      "text": "client/.dockerignore"
                    },
                    {
                      "text": " 文件（注意 dockerignore 前面有一个点）："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "client/.dockerignore",
              "commit": "06a33bd",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "很简单，我们只想忽略掉可怕的 node_modules。再次运行构建命令："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-client ."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/docker-build-nginx.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "太好了！这次只有 1.386MB，而且速度也明显快了很多！"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "运行容器"
                }
              ],
              "id": "VViAbz3_w8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "终于到了容器化的最后一步——创建并运行我们的容器！通过以下命令运行刚才创建的 "
                },
                {
                  "code": true,
                  "text": "dream-client"
                },
                {
                  "text": " 镜像："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -p 8080:80 --name client -d dream-client"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "与之前类似，我们还是设定端口映射规则为 "
                },
                {
                  "code": true,
                  "text": "8080:80"
                },
                {
                  "text": "，容器名称为 "
                },
                {
                  "code": true,
                  "text": "client"
                },
                {
                  "text": "，并且通过 "
                },
                {
                  "code": true,
                  "text": "-d"
                },
                {
                  "text": " 设置为后台运行。然后访问 "
                },
                {
                  "code": true,
                  "text": "localhost:8080"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/finish-demo1.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "成功了！一开始定下的三个梦想也都完成了！"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "甚至，我们已经可以通过内网来访问“梦想清单”了。Linux 或 macOS 的同学可以在终端输入 "
                    },
                    {
                      "code": true,
                      "text": "ifconfig"
                    },
                    {
                      "text": " 命令查询本机内网 IP，Windows 的同学则是在 CMD 输入 "
                    },
                    {
                      "code": true,
                      "text": "ipconfig"
                    },
                    {
                      "text": " 查询本机内网 IP，一般是以 "
                    },
                    {
                      "code": true,
                      "text": "10"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "172.16"
                    },
                    {
                      "text": "~"
                    },
                    {
                      "code": true,
                      "text": "172.31"
                    },
                    {
                      "text": " 或 "
                    },
                    {
                      "code": true,
                      "text": "192.168"
                    },
                    {
                      "text": " 开头。例如我的内网 IP 是 "
                    },
                    {
                      "code": true,
                      "text": "192.168.0.2"
                    },
                    {
                      "text": "，那么在同一局域网下（一般是 WiFi），可以用其他设备（比如说你的手机）访问 "
                    },
                    {
                      "code": true,
                      "text": "192.168.0.2:8080"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "回忆与升华"
                }
              ],
              "id": "FvEqRHk9DU"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "关于镜像标签"
                }
              ],
              "id": "N3hlornKCI"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在刚才的实战中，你也许已经注意到在拉取和构建镜像时，Docker 总是会为我们加上一个 "
                },
                {
                  "code": true,
                  "text": ":latest"
                },
                {
                  "text": " 标签，这个 "
                },
                {
                  "code": true,
                  "text": ":latest"
                },
                {
                  "text": " 的含义便是“最新”的意思。和软件的版本机制一样，镜像也可以通过标签实现“版本化”。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "latest"
                    },
                    {
                      "text": " 字面上的意思的确是“最新的”，但也只是一个普通的标签，并不能确保真的是“最新的”，更"
                    },
                    {
                      "bold": true,
                      "text": "不会自动更新"
                    },
                    {
                      "text": "。更多讨论请参考"
                    },
                    {
                      "link": true,
                      "url": "http://dockone.io/article/165",
                      "text": "这篇文章"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实际上，我们完全可以在拉取或构建镜像时指定标签（通常被认为是一种好的做法）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker pull nginx:1.13"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker build -t dream-client:1.0.0"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "还可以给现有的镜像打上标签："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 把默认的 latest 镜像打上一个 newest 标签"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker tag dream-client dream-client:newest"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 甚至可以同时修改镜像的名称和标签"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker tag dream-client:1.0.0 dream-client2:latest"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，标签未必一定是版本，还可以是任何字符串（当然最好要有意义，否则过了一阵子你也不记得这个打了这个标签的容器有什么作用了）。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "关于 Dockerfile"
                }
              ],
              "id": "tdl6sblgmO"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Dockerfile 实际上是默认名称，我们当然可以取一个别的名字，例如 "
                },
                {
                  "code": true,
                  "text": "myDockerfile"
                },
                {
                  "text": "，然后在构建镜像时指定 "
                },
                {
                  "code": true,
                  "text": "-f"
                },
                {
                  "text": "（"
                },
                {
                  "code": true,
                  "text": "--file"
                },
                {
                  "text": "）参数即可："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker build -f myDockerfile -t dream-client ."
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里举两个经典的使用场景："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "例如在 Web 开发时，分别创建 "
                    },
                    {
                      "code": true,
                      "text": "Dockerfile.dev"
                    },
                    {
                      "text": " 用于构建开发镜像，创建 "
                    },
                    {
                      "code": true,
                      "text": "Dockerfile.prod"
                    },
                    {
                      "text": " 构建生产环境下的镜像；"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在训练 AI 模型时，创建 "
                    },
                    {
                      "code": true,
                      "text": "Dockerfile.cpu"
                    },
                    {
                      "text": " 用于构建用 CPU 训练的镜像，创建 "
                    },
                    {
                      "code": true,
                      "text": "Dockerfile.gpu"
                    },
                    {
                      "text": " 构建用 GPU 训练的镜像。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "再次思考镜像和容器的关系"
                }
              ],
              "id": "ZWUVJbDiw-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "经过刚才的容器化实战，相信你对镜像和容器的关系又有了新的理解。请看下面这张图："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image-container.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前的“小试牛刀”环节中（用绿色箭头标出），我们："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "code": true,
                      "text": "docker pull"
                    },
                    {
                      "text": " 从 Docker 镜像仓库拉取镜像到本地"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "code": true,
                      "text": "docker run"
                    },
                    {
                      "text": " 命令，根据镜像创建并运行容器"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "code": true,
                      "text": "docker stop"
                    },
                    {
                      "text": " 等命令操作容器，使其发生各种状态转变"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而在这一节的容器化实战中（用红色箭头标出），我们："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "code": true,
                      "text": "docker build"
                    },
                    {
                      "text": " 命令，根据一个 Dockerfile 文件构建镜像"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "code": true,
                      "text": "docker tag"
                    },
                    {
                      "text": " 命令，给镜像打上标签，得到一个新镜像"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "（由于篇幅有限没有讲）通过 "
                    },
                    {
                      "code": true,
                      "text": "docker commit"
                    },
                    {
                      "text": " 命令，将一个现有的容器转化为镜像"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "俯瞰全景：Docker 架构图"
                }
              ],
              "id": "2fazNIau3Q"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "是时候拿出经典的 Docker 架构图了："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/engine-components-flow.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，Docker 遵循经典的客户端-服务器架构（client-server），核心组成部分包括："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "服务器（也就是 Docker 守护进程），在 Linux 系统中也就是 "
                    },
                    {
                      "code": true,
                      "text": "dockerd"
                    },
                    {
                      "text": " 命令"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "服务器暴露出的 REST API，提供了与守护进程通信和操作的接口"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "客户端（也就是我们一直在用的命令行程序 "
                    },
                    {
                      "code": true,
                      "text": "docker"
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，这篇 Docker 快速入门实战教程也就结束啦，希望你已经对 Docker 的概念和使用有了初步的理解。后续我们还会发表 Docker 进阶的内容（例如 Network 网络、Volume 数据卷、Docker Compose 等等），手把手带大家部署一个全栈应用（前后端和数据库）到云主机（或任何你能够登录的机器），敬请期待~"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "60786e9",
      "id": "wC7V10Rkpe",
      "articleId": "cd44c8468a5c475985364cae57387491",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "60786e9",
          "id": "qtBg_5w-GV",
          "fixed": true,
          "children": [
            {
              "text": "连接容器: 梦境亦相通"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2020/01/01/442cc8d/",
                  "text": "上一篇教程"
                },
                {
                  "text": "中，我们带你了解了镜像和容器这两大关键的概念，熟悉了常用的 docker 命令，并成功地容器化了第一个应用。但是，那只是我们“筑梦之旅”的序章。接下来，我们将实现后端 API 服务器 + 数据库的容器化。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们为你准备好了应用程序代码，请运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你看了上一篇教程，仓库已经克隆下来了"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd docker-dream"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git fetch origin network-start"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git checkout network-start"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你打算直接从这篇教程开始"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b network-start https://github.com/tuture-dev/docker-dream.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd docker-dream"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "和之前容器化前端静态页面服务器相比，多了一个难点：服务器和数据库分别是两个独立的容器，但是服务器需要连接和访问数据库，怎么实现跨容器之间的通信？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在《盗梦空间》中，不同的梦境之间是无法连接的，然而幸运的是在 Docker 中是可以的——借助 Docker Network。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在早期，Docker 容器可以通过 docker run 命令的 "
                    },
                    {
                      "code": true,
                      "text": "--link"
                    },
                    {
                      "text": " 选项来连接容器，但是 Docker 官方宣布这种方式已经过时，并有可能被移除"
                    },
                    {
                      "text": "（"
                    },
                    {
                      "link": true,
                      "url": "https://docs.docker.com/network/links/",
                      "text": "参考文档"
                    },
                    {
                      "text": "）。而本文将讲解 Docker 官方推荐的方式连接容器："
                    },
                    {
                      "bold": true,
                      "text": "自定义网络"
                    },
                    {
                      "text": "（User-defined Networks）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Network 类型"
                }
              ],
              "id": "1RLUR3bi-B"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Network，顾名思义就是“网络”，能够让不同的容器之间相互通信。首先有必要要列举一下 Docker Network 的五种驱动模式（driver）："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "bridge"
                    },
                    {
                      "text": "：默认的驱动模式，即“网桥”，通常用于"
                    },
                    {
                      "bold": true,
                      "text": "单机"
                    },
                    {
                      "text": "（更准确地说，是单个 Docker 守护进程）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "overlay"
                    },
                    {
                      "text": "：Overlay 网络能够连接多个 Docker 守护进程，通常用于"
                    },
                    {
                      "bold": true,
                      "text": "集群"
                    },
                    {
                      "text": "，后续讲 Docker Swarm 的文章会重点讲解"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "host"
                    },
                    {
                      "text": "：直接使用主机（也就是运行 Docker 的机器）网络，仅适用于 Docker 17.06+ 的集群服务"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "macvlan"
                    },
                    {
                      "text": "：Macvlan 网络通过为每个容器分配一个 MAC 地址，使其能够被显示为一台物理设备，适用于希望直连到物理网络的应用程序（例如嵌入式系统、物联网等等）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "none"
                    },
                    {
                      "text": "：禁用此容器的所有网络"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "bold": true,
                  "text": "这篇文章将围绕默认的 Bridge 网络驱动展开"
                },
                {
                  "text": "。没错，就是连接不同梦境的那座“桥”。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小试牛刀"
                }
              ],
              "id": "Iu3tsiD_By"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们还是通过一些小实验来理解和感受 Bridge Network。与上一节不同的是，我们将使用 "
                },
                {
                  "link": true,
                  "url": "https://www.alpinelinux.org/",
                  "text": "Alpine Linux"
                },
                {
                  "text": " 镜像作为实验原材料，因为："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "非常轻量小巧（整个镜像仅 5MB 左右）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "功能丰富，比“瑞士军刀” "
                    },
                    {
                      "link": true,
                      "url": "https://www.busybox.net/",
                      "text": "Busybox"
                    },
                    {
                      "text": " 还要完善"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "网桥网络可分为两类："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "默认网络（Docker 运行时自带，不推荐用于生产环境）"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "自定义网络（推荐使用）"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们分别实践一下吧。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "默认网络"
                }
              ],
              "id": "IdWGJ4e_lJ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个小实验的内容如下图所示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/network-1.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们会在默认的 "
                },
                {
                  "code": true,
                  "text": "bridge"
                },
                {
                  "text": " 网络上连接两个容器 "
                },
                {
                  "code": true,
                  "text": "alpine1"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": "。 运行以下命令，查看当前已有的网络："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker network ls"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "应该会看到以下输出（注意你机器上的 ID 很有可能不一样）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "NETWORK ID          NAME                DRIVER              SCOPE"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cb33efa4d163        bridge              bridge              local"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "010deedec029        host                host                local"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "772a7a450223        none                null                local"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这三个默认网络分别对应上面的 "
                },
                {
                  "code": true,
                  "text": "bridge"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "host"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "none"
                },
                {
                  "text": " 网络类型。接下来我们将创建两个容器，分别名为 "
                },
                {
                  "code": true,
                  "text": "alpine1"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": "，命令如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -dit --name alpine1 alpine"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -dit --name alpine2 alpine"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "-dit"
                },
                {
                  "text": " 是 "
                },
                {
                  "code": true,
                  "text": "-d"
                },
                {
                  "text": "（后台模式）、"
                },
                {
                  "code": true,
                  "text": "-i"
                },
                {
                  "text": "（交互模式）和 "
                },
                {
                  "code": true,
                  "text": "-t"
                },
                {
                  "text": "（虚拟终端）三个选项的合并。通过这个组合，我们可以让容器保持在后台运行而不会退出（没错，相当于是在“空转”）。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "用 "
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": " 命令确定以上两个容器均在后台运行："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "501559d2fab7        alpine              \"/bin/sh\"           2 seconds ago       Up 1 second                             alpine2"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "18bed3178732        alpine              \"/bin/sh\"           3 seconds ago       Up 2 seconds                            alpine1"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过以下命令查看默认的 "
                },
                {
                  "code": true,
                  "text": "bridge"
                },
                {
                  "text": " 网络的详情："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker network inspect bridge"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "应该会输出 JSON 格式的网络详细数据："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "json",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Name\": \"bridge\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Id\": \"cb33efa4d163adaa61d6b80c9425979650d27a0974e6d6b5cd89fd743d64a44c\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Created\": \"2020-01-08T07:29:11.102566065Z\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Scope\": \"local\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Driver\": \"bridge\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"EnableIPv6\": false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"IPAM\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"Driver\": \"default\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"Options\": null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"Config\": ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          \"Subnet\": \"172.17.0.0/16\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          \"Gateway\": \"172.17.0.1\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      ]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Internal\": false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Attachable\": false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Ingress\": false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"ConfigFrom\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"Network\": \"\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"ConfigOnly\": false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Containers\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"18bed3178732b5c7a37d7ad820c111fac72a6b0f47844401d60a18690bd37ee5\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Name\": \"alpine1\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"EndpointID\": \"9c7d8ee9cbd017c6bbdfc023397b23a4ce112e4957a0cfa445fd7f19105cc5a6\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"MacAddress\": \"02:42:ac:11:00:02\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"IPv4Address\": \"172.17.0.2/16\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"IPv6Address\": \"\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"501559d2fab736812c0cf181ed6a0b2ee43ce8116df9efbb747c8443bc665b03\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Name\": \"alpine2\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"EndpointID\": \"da192d61e4b2df039023446830bf477cc5a9a026d32938cb4a350a82fea5b163\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"MacAddress\": \"02:42:ac:11:00:03\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"IPv4Address\": \"172.17.0.3/16\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"IPv6Address\": \"\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Options\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.bridge.default_bridge\": \"true\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.bridge.enable_icc\": \"true\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.bridge.enable_ip_masquerade\": \"true\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.bridge.name\": \"docker0\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      \"com.docker.network.driver.mtu\": \"1500\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"Labels\": {}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们重点要关注的是两个字段："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "IPAM"
                    },
                    {
                      "text": "：IP 地址管理信息（IP Address Management），可以看到网关地址为 "
                    },
                    {
                      "code": true,
                      "text": "172.17.0.1"
                    },
                    {
                      "text": "（由于篇幅有限，想要了解"
                    },
                    {
                      "bold": true,
                      "text": "网关"
                    },
                    {
                      "text": "的同学可自行查阅计算机网络以及 TCP/IP 协议方面的资料）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "Containers"
                    },
                    {
                      "text": "：包括此网络上连接的所有容器，可以看到我们刚刚创建的 "
                    },
                    {
                      "code": true,
                      "text": "alpine1"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "alpine2"
                    },
                    {
                      "text": "，它们的 IP 地址分别为 "
                    },
                    {
                      "code": true,
                      "text": "172.17.0.2"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "172.17.0.3"
                    },
                    {
                      "text": "（后面的 "
                    },
                    {
                      "code": true,
                      "text": "/16"
                    },
                    {
                      "text": " 是子网掩码，暂时不用考虑）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你熟悉 Go 模板语法，可以通过 "
                    },
                    {
                      "code": true,
                      "text": "-f"
                    },
                    {
                      "text": "（"
                    },
                    {
                      "code": true,
                      "text": "format"
                    },
                    {
                      "text": "）参数过滤掉不需要的信息。例如我们只想查看 "
                    },
                    {
                      "code": true,
                      "text": "bridge"
                    },
                    {
                      "text": " 的网关地址："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ docker network inspect --format '{{json .IPAM.Config }}' bridge"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "[{\"Subnet\":\"172.17.0.0/16\",\"Gateway\":\"172.17.0.1\"}]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们进入 "
                },
                {
                  "code": true,
                  "text": "alpine1"
                },
                {
                  "text": " 容器中："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker attach alpine1"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "attach"
                    },
                    {
                      "text": " 命令只能进入设置了交互式运行的容器（也就是在启动时加了 "
                    },
                    {
                      "code": true,
                      "text": "-i"
                    },
                    {
                      "text": " 参数）。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你看到前面的命令提示符变成 "
                },
                {
                  "code": true,
                  "text": "/ #"
                },
                {
                  "text": "，说明我们已经身处容器之中了。我们通过 "
                },
                {
                  "code": true,
                  "text": "ping"
                },
                {
                  "text": " 命令测试一下网络连接情况，首先 ping 一波图雀社区的主站 tuture.co（"
                },
                {
                  "code": true,
                  "text": "-c"
                },
                {
                  "text": " 参数代表发送数据包的数量，这里我们设为 5）："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # ping -c 5 tuture.co"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PING tuture.co (150.109.19.98): 56 data bytes"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 150.109.19.98: seq=2 ttl=37 time=65.294 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 150.109.19.98: seq=3 ttl=37 time=65.425 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 150.109.19.98: seq=4 ttl=37 time=65.332 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "--- tuture.co ping statistics ---"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "5 packets transmitted, 3 packets received, 40% packet loss"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "round-trip min/avg/max = 65.294/65.350/65.425 ms"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "OK，虽然丢了几个包，但是可以连上（取决于你的网络环境，全丢包也是正常的）。由此可见，"
                },
                {
                  "bold": true,
                  "text": "容器内可以访问主机所连接的全部网络"
                },
                {
                  "text": "（包括 localhost）。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来测试能否连接到 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": "，在刚才 "
                },
                {
                  "code": true,
                  "text": "docker network inspect"
                },
                {
                  "text": " 命令的输出中找到 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": " 的 IP 为 "
                },
                {
                  "code": true,
                  "text": "172.17.0.3"
                },
                {
                  "text": "，尝试能否 ping 通："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # ping -c 5 172.17.0.3"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PING 172.17.0.3 (172.17.0.3): 56 data bytes"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.147 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.103 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.102 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.125 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.17.0.3: seq=4 ttl=64 time=0.125 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "--- 172.17.0.3 ping statistics ---"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "5 packets transmitted, 5 packets received, 0% packet loss"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "round-trip min/avg/max = 0.102/0.120/0.147 ms"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "完美！我们能够从 "
                },
                {
                  "code": true,
                  "text": "alpine1"
                },
                {
                  "text": " 中访问 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": " 容器。作为练习，你可以自己尝试一下能否从 "
                },
                {
                  "code": true,
                  "text": "alpine2"
                },
                {
                  "text": " 容器中 ping 通 "
                },
                {
                  "code": true,
                  "text": "alpine1"
                },
                {
                  "text": " 哦。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你不想让 "
                    },
                    {
                      "code": true,
                      "text": "alpine1"
                    },
                    {
                      "text": " 停下来，记得通过 Ctrl + P + Ctrl + Q（按住 Ctrl，然后依次按 P 和 Q 键）“脱离”（detach，也就是刚才 "
                    },
                    {
                      "code": true,
                      "text": "attach"
                    },
                    {
                      "text": " 命令的反义词）容器，而不是按 Ctrl + D 哦。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "自定义网络"
                }
              ],
              "id": "4Xyvgat68v"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你跟着上面一路试下来，会发现默认的 bridge 网络存在一个很大的问题："
                },
                {
                  "bold": true,
                  "text": "只能通过 IP 地址相互访问"
                },
                {
                  "text": "。这毫无疑问是非常麻烦的，当容器数量很多的时候难以管理，而且每次的 IP 都可能发生变化。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而自定义网络则很好地解决了这一问题。"
                },
                {
                  "bold": true,
                  "text": "在同一个自定义网络中，每个容器能够通过彼此的名称相互通信"
                },
                {
                  "text": "，因为 Docker 为我们搞定了 DNS 解析工作，这种机制被称为"
                },
                {
                  "bold": true,
                  "text": "服务发现"
                },
                {
                  "text": "（Service Discovery）。具体而言，我们将创建一个自定义网络 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": "，并创建 "
                },
                {
                  "code": true,
                  "text": "alpine3"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "alpine4"
                },
                {
                  "text": " 两个容器，连上 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": "，如下图所示。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/network-2.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们开始动手吧。首先创建自定义网络 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker network create my-net"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 由于默认网络驱动为 bridge，因此相当于以下命令"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# docker network create --driver bridge my-net"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "查看当前所有的网络："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker network ls"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到刚刚创建的 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "NETWORK ID          NAME                DRIVER              SCOPE"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cb33efa4d163        bridge              bridge              local"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "010deedec029        host                host                local"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "feb13b480be6        my-net              bridge              local"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "772a7a450223        none                null                local"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "创建两个新的容器 "
                },
                {
                  "code": true,
                  "text": "alpine3"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "alpine4"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -dit --name alpine3 --network my-net alpine"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -dit --name alpine4 --network my-net alpine"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们通过 "
                },
                {
                  "code": true,
                  "text": "--network"
                },
                {
                  "text": " 参数指定容器想要连接的网络（也就是刚才创建的 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": "）。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果在一开始创建并运行容器时忘记指定网络，那么下次再想指定网络时，可以通过 "
                    },
                    {
                      "code": true,
                      "text": "docker network connect"
                    },
                    {
                      "text": " 命令再次连上（第一个参数是网络名称 "
                    },
                    {
                      "code": true,
                      "text": "my-net"
                    },
                    {
                      "text": "，第二个是需要连接的容器 "
                    },
                    {
                      "code": true,
                      "text": "alpine3"
                    },
                    {
                      "text": "）："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker network connect my-net alpine3"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进入到 "
                },
                {
                  "code": true,
                  "text": "alpine3"
                },
                {
                  "text": " 中，测试能否 ping 通 "
                },
                {
                  "code": true,
                  "text": "alpine4"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "$ docker attach alpine3"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # ping -c 5 alpine4"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "PING alpine4 (172.19.0.3): 56 data bytes"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.247 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.176 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.19.0.3: seq=2 ttl=64 time=0.180 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.19.0.3: seq=3 ttl=64 time=0.176 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "64 bytes from 172.19.0.3: seq=4 ttl=64 time=0.161 ms"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "--- alpine4 ping statistics ---"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "5 packets transmitted, 5 packets received, 0% packet loss"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "round-trip min/avg/max = 0.161/0.188/0.247 ms"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到 "
                },
                {
                  "code": true,
                  "text": "alpine4"
                },
                {
                  "text": " 被自动解析成了 "
                },
                {
                  "code": true,
                  "text": "172.19.0.3"
                },
                {
                  "text": "。我们可以通过 "
                },
                {
                  "code": true,
                  "text": "docker network inspect"
                },
                {
                  "text": " 来验证一下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "$ docker network inspect --format '{{range .Containers}}{{.Name}}: {{.IPv4Address}} {{end}}' my-net"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alpine4: 172.19.0.3/16 alpine3: 172.19.0.2/16"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到 "
                },
                {
                  "code": true,
                  "text": "alpine4"
                },
                {
                  "text": " 的 IP 的确为 "
                },
                {
                  "code": true,
                  "text": "172.19.0.3"
                },
                {
                  "text": "，解析是正确的！"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "一些收尾工作"
                }
              ],
              "id": "8_O3_lHIfR"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "实验做完了，让我们把之前所有的容器全部销毁："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm -f alpine1 alpine2 alpine3 alpine4"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "把创建的 "
                },
                {
                  "code": true,
                  "text": "my-net"
                },
                {
                  "text": " 也删除："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker network rm my-net"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "server/Dockerfile",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "zb5JmC8Q5r"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "容器化服务器"
                    }
                  ],
                  "id": "amSbjPrgIg"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先对后端服务器也进行容器化。创建 "
                    },
                    {
                      "code": true,
                      "text": "server/Dockerfile"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/Dockerfile",
              "commit": "60786e9",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到这个 Dockerfile 比"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/442cc8d/",
                      "text": "上一篇教程"
                    },
                    {
                      "text": "中的要复杂不少。每一行的含义已经注释在代码中了，我们来看一看多了哪些新东西："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "RUN"
                        },
                        {
                          "text": " 指令用于在容器中运行任何命令，这里我们通过 "
                        },
                        {
                          "code": true,
                          "text": "npm install"
                        },
                        {
                          "text": " 安装所有项目依赖（当然之前配置了一下 npm 镜像，可以安装得快一点）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "ENV"
                        },
                        {
                          "text": " 指令用于向容器中注入环境变量，这里我们设置了 数据库的连接字符串 "
                        },
                        {
                          "code": true,
                          "text": "MONGO_URI"
                        },
                        {
                          "text": "（"
                        },
                        {
                          "bold": true,
                          "text": "注意这里给数据库取名为 "
                        },
                        {
                          "bold": true,
                          "code": true,
                          "text": "dream-db"
                        },
                        {
                          "bold": true,
                          "text": "，后面就会创建这个容器"
                        },
                        {
                          "text": "），还配置了服务器的 "
                        },
                        {
                          "code": true,
                          "text": "HOST"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "PORT"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "EXPOSE"
                        },
                        {
                          "text": " 指令用于开放端口 4000。之前在用 Nginx 容器化前端项目时没有指定，是因为 Nginx 基础镜像已经开放了 8080 端口，无需我们设置；而这里用的 Node 基础镜像则没有开放，需要我们自己去配置"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "CMD"
                        },
                        {
                          "text": " 指令用于指定此容器的启动命令（也就是 "
                        },
                        {
                          "code": true,
                          "text": "docker ps"
                        },
                        {
                          "text": " 查看时的 COMMAND 一列），对于服务器来说当然就是保持运行状态。在后面“回忆与升华”部分会详细展开。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "初次尝试容器的朋友很容易犯的一个错误就是忘记将服务器的 "
                        },
                        {
                          "code": true,
                          "text": "host"
                        },
                        {
                          "text": " 从 "
                        },
                        {
                          "code": true,
                          "text": "localhost"
                        },
                        {
                          "text": "（"
                        },
                        {
                          "code": true,
                          "text": "127.0.0.1"
                        },
                        {
                          "text": "）改成 "
                        },
                        {
                          "code": true,
                          "text": "0.0.0.0"
                        },
                        {
                          "text": "，导致服务器无法在容器之外被访问到（"
                        },
                        {
                          "italic": true,
                          "text": "我自己学习的时候也浪费了很多时间"
                        },
                        {
                          "text": "）。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "server/.dockerignore",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "与之前前端容器化类似，创建 "
                    },
                    {
                      "code": true,
                      "text": "server/.dockerignore"
                    },
                    {
                      "text": " 文件，忽略服务器日志 "
                    },
                    {
                      "code": true,
                      "text": "access.log"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "node_modules"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "server/.dockerignore",
              "commit": "60786e9",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在项目根目录下运行以下命令，构建服务器镜像，指定名称为 "
                    },
                    {
                      "code": true,
                      "text": "dream-server"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-server server"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "连接服务器与数据库"
                    }
                  ],
                  "id": "cf_BVnRZe5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "根据之前的知识，我们为现在的“梦想清单”应用创建一个自定义网络 "
                    },
                    {
                      "code": true,
                      "text": "dream-net"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker network create dream-net"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们使用官方的 "
                    },
                    {
                      "code": true,
                      "text": "mongo"
                    },
                    {
                      "text": " 镜像创建并运行 MongoDB 容器，命令如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run --name dream-db --network dream-net -d mongo"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们指定容器名称为 "
                    },
                    {
                      "code": true,
                      "text": "dream-db"
                    },
                    {
                      "text": "（还记得这个名字吗），所连接的网络为 "
                    },
                    {
                      "code": true,
                      "text": "dream-net"
                    },
                    {
                      "text": "，并且在后台模式下运行（"
                    },
                    {
                      "code": true,
                      "text": "-d"
                    },
                    {
                      "text": "）。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你也许会问，为什么这里开启容器的时候没有指定端口映射呢？因为"
                        },
                        {
                          "bold": true,
                          "text": "在同一自定义网络中的所有容器会互相暴露所有端口"
                        },
                        {
                          "text": "，不同的应用之间可以更轻松地相互通信；同时，除非通过 "
                        },
                        {
                          "code": true,
                          "text": "-p"
                        },
                        {
                          "text": "（"
                        },
                        {
                          "code": true,
                          "text": "--publish"
                        },
                        {
                          "text": "）手动开放端口，"
                        },
                        {
                          "bold": true,
                          "text": "网络之外无法访问网络中容器的其他端口"
                        },
                        {
                          "text": "，实现了良好的隔离性。"
                        },
                        {
                          "bold": true,
                          "text": "网络之内的互操作性"
                        },
                        {
                          "text": "和"
                        },
                        {
                          "bold": true,
                          "text": "网络内外的隔离性"
                        },
                        {
                          "text": "也是 Docker Network 的一大优势所在。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "danger",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里我们在开启 MongoDB 数据库容器时没有设置任何鉴权措施（例如设置用户名和密码），所有连接数据库的请求都可以任意修改数据，在生产环境是极其危险的。后续文章中我们会讲解如何在容器中管理机密信息（例如密码）。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后运行服务器容器："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -p 4000:4000 --name dream-api --network dream-net -d dream-server"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "查看服务器容器的日志输出，确定 MongoDB 连接成功："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ docker logs dream-api                                                       "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "Server is running on http://0.0.0.0:4000"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "Mongoose connected."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着你可以通过 Postman 或者 curl 来测试一波服务器 API  （"
                    },
                    {
                      "code": true,
                      "text": "localhost:4000"
                    },
                    {
                      "text": " ），这里为了节约篇幅就省略了。当然你也可以直接跳过，因为马上我们就可以通过前端来操作数据了！"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "容器化前端页面"
                    }
                  ],
                  "id": "-2GzhB9pNU"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "正如"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/442cc8d/",
                      "text": "上一篇文章"
                    },
                    {
                      "text": "所实现的那样，在项目根目录下，通过以下命令进行容器化："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-client client"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后运行容器："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -p 8080:80 --name client -d dream-client"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以通过 "
                    },
                    {
                      "code": true,
                      "text": "docker ps"
                    },
                    {
                      "text": " 命令检验三个容器是否全部正确开启："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/docker-ps-fullstack.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，访问 "
                    },
                    {
                      "code": true,
                      "text": "localhost:8080"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/docker-network-demo.gif",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在最后刷新了几次页面，数据记录也都还在，说明我们带有数据库的全栈应用跑起来了！让我们通过交互式执行的方式进入到数据库容器 "
                    },
                    {
                      "code": true,
                      "text": "dream-db"
                    },
                    {
                      "text": " 中，通过 Mongo Shell 简单地查询一波刚才的数据："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ docker exec -it dream-db mongo"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "MongoDB shell version v3.4.10"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "connecting to: mongodb://127.0.0.1:27017"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "MongoDB server version: 3.4.10"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "Welcome to the MongoDB shell."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "For interactive help, type \"help\"."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "> use todos"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "switched to db todos"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "> db.getCollection('todos').find()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{ \"_id\" : ObjectId(\"5e171fda820251a751aae6f5\"), \"completed\" : true, \"text\" : \"了解 Docker Network\", \"timestamp\" : ISODate(\"2020-01-09T12:43:06.865Z\"), \"__v\" : 0 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{ \"_id\" : ObjectId(\"5e171fe08202517c11aae6f6\"), \"completed\" : true, \"text\" : \"搭建默认网络\", \"timestamp\" : ISODate(\"2020-01-09T12:43:12.205Z\"), \"__v\" : 0 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{ \"_id\" : ObjectId(\"5e171fe3820251d1a4aae6f7\"), \"completed\" : false, \"text\" : \"搭建自定义网络\", \"timestamp\" : ISODate(\"2020-01-09T12:43:15.962Z\"), \"__v\" : 0 }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "完美！然后按 Ctrl + D 就可以退出来了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "回忆与升华"
                }
              ],
              "id": "mpbgxBat-j"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "理解命令：梦境的主旋律"
                }
              ],
              "id": "qDuKI8lShf"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "每个容器自从被创建之时，就注定要运行一道命令（Command），就好像在筑梦时要安排一个主旋律、一个基调那样。之前在运行 "
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": " 的时候，你应该也注意到了 "
                },
                {
                  "code": true,
                  "text": "COMMAND"
                },
                {
                  "text": " 一栏，正是每个容器所运行的命令。那么我们怎么指定容器的命令呢？又能不能运行新的命令呢？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，我们主要通过两种方式指定容器的命令："
                }
              ]
            },
            {
              "type": "heading-five",
              "children": [
                {
                  "text": "通过 Dockerfile 提供默认命令"
                }
              ],
              "id": "HV_373XvZM"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在构建镜像时，我们可以在 "
                },
                {
                  "code": true,
                  "text": "Dockerfile"
                },
                {
                  "text": " 的最后通过 "
                },
                {
                  "code": true,
                  "text": "CMD"
                },
                {
                  "text": " 指令指定命令，例如在构建后端服务器时的 "
                },
                {
                  "code": true,
                  "text": "[ \"node\", \"server.js\" ]"
                },
                {
                  "text": " 命令。在指定命令时，我们有三种写法："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "CMD [\"executable\",\"param1\",\"param2\"]"
                    },
                    {
                      "text": "（exec 格式，"
                    },
                    {
                      "bold": true,
                      "text": "推荐"
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "CMD [\"param1\",\"param2\"]"
                    },
                    {
                      "text": "（需要结合 Entrypoint 使用）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "CMD command param1 param2"
                    },
                    {
                      "text": "（shell 格式）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中 "
                },
                {
                  "code": true,
                  "text": "executable"
                },
                {
                  "text": " 代表可执行文件的路径，例如 "
                },
                {
                  "code": true,
                  "text": "node"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "/bin/sh"
                },
                {
                  "text": "；"
                },
                {
                  "code": true,
                  "text": "param1"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "param2"
                },
                {
                  "text": " 代表参数。"
                },
                {
                  "italic": true,
                  "text": "我们在后续讨论 Dockerfile 的高阶使用时会讨论 Entrypoint 的使用，这篇文章不会涉及"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在使用第一种 exec 格式时，必须使用"
                    },
                    {
                      "bold": true,
                      "text": "双引号"
                    },
                    {
                      "text": "，因为整个命令将以 JSON 格式被解析。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果要执行变量替换等 Shell 操作，例如 "
                    },
                    {
                      "code": true,
                      "text": "echo $HOME"
                    },
                    {
                      "text": "，直接写成 "
                    },
                    {
                      "code": true,
                      "text": "[\"echo\", \"$HOME\"]"
                    },
                    {
                      "text": " 是无效的，需要改写成 "
                    },
                    {
                      "code": true,
                      "text": "[\"sh\", \"-c\", \"echo $HOME\"]"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-five",
              "children": [
                {
                  "text": "创建或运行容器时指定命令"
                }
              ],
              "id": "-KLzBd1odC"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在创建或运行容器时，通过添加命令参数可以"
                },
                {
                  "bold": true,
                  "text": "覆盖"
                },
                {
                  "text": "构建镜像时指定的命令，例如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run nginx echo hello"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过指定 "
                },
                {
                  "code": true,
                  "text": "echo hello"
                },
                {
                  "text": " 命令参数，就会让这个容器输出一个 hello 然后退出，而不会运行默认的 "
                },
                {
                  "code": true,
                  "text": "nginx -g 'daemon off;'"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然，正如"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2020/01/01/442cc8d/",
                  "text": "第一篇文章"
                },
                {
                  "text": "所实践的，我们还可以指定命令为 "
                },
                {
                  "code": true,
                  "text": "bash"
                },
                {
                  "text": "（或 "
                },
                {
                  "code": true,
                  "text": "sh"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "mongo"
                },
                {
                  "text": "、"
                },
                {
                  "code": true,
                  "text": "node"
                },
                {
                  "text": " 等其他交互式程序），然后结合 "
                },
                {
                  "code": true,
                  "text": "-it"
                },
                {
                  "text": " 选项，就可以进入容器中交互式运行了。"
                }
              ]
            },
            {
              "type": "heading-five",
              "children": [
                {
                  "text": "通过 exec 运行新的命令"
                }
              ],
              "id": "pbSI88XgOp"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过 "
                },
                {
                  "code": true,
                  "text": "docker exec"
                },
                {
                  "text": "，我们可以让已经运行中的容器执行新的命令。例如，对于我们之前的 "
                },
                {
                  "code": true,
                  "text": "dream-db"
                },
                {
                  "text": " 容器，我们通过 "
                },
                {
                  "code": true,
                  "text": "mongodump"
                },
                {
                  "text": " 命令来创建数据库备份："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker exec dream-db mongodump"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后可以进一步通过 "
                },
                {
                  "code": true,
                  "text": "docker exec -it"
                },
                {
                  "text": " 来进入 "
                },
                {
                  "code": true,
                  "text": "dream-db"
                },
                {
                  "text": " 中进行交互式运行，检查刚才导出的 "
                },
                {
                  "code": true,
                  "text": "dump"
                },
                {
                  "text": " 目录："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "text",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "$ docker exec -it dream-db bash"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "root@c51d9355d8da:/# ls dump/"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "admin  todos"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样地，按 Ctrl + D 退出就可以了。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你也许会好奇，为什么在 "
                    },
                    {
                      "code": true,
                      "text": "docker run"
                    },
                    {
                      "text": " 交互式执行的时候按 Ctrl + D 就容器就直接停止了，而在 "
                    },
                    {
                      "code": true,
                      "text": "docker exec"
                    },
                    {
                      "text": " 的情况下退出却不会导致容器停止呢？因为 "
                    },
                    {
                      "code": true,
                      "text": "docker exec -it"
                    },
                    {
                      "text": " 相当于在现有的容器上运行了一个新的终端进程，而不会影响之前的主命令进程。只要主进程不结束，容器就不会停止。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "小诀窍：如何轻松记住几十个 Docker 命令？"
                }
              ],
              "id": "1biS7IbQQ7"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在刚才的实战中，我们也接触了很多新的 Docker 命令，怎么记住那么多命令呢？其实 docker 大部分命令都符合以下格式："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker <对象类型> <操作名称> [其他选项和参数]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "对象类型"
                    },
                    {
                      "text": "：到目前，我们接触的 Docker 对象类型包括"
                    },
                    {
                      "bold": true,
                      "text": "容器"
                    },
                    {
                      "code": true,
                      "text": "container"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "bold": true,
                      "text": "镜像"
                    },
                    {
                      "text": " "
                    },
                    {
                      "code": true,
                      "text": "image"
                    },
                    {
                      "text": " 和"
                    },
                    {
                      "bold": true,
                      "text": "网络"
                    },
                    {
                      "text": " "
                    },
                    {
                      "code": true,
                      "text": "network"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "操作名称"
                    },
                    {
                      "text": "：操作可以分为两大类：1）适用于所有对象的操作，例如 "
                    },
                    {
                      "code": true,
                      "text": "ls"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "rm"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "inspect"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "prune"
                    },
                    {
                      "text": " 等等；2）对象专属操作，例如容器专有的 "
                    },
                    {
                      "code": true,
                      "text": "run"
                    },
                    {
                      "text": " 操作，镜像专有的 "
                    },
                    {
                      "code": true,
                      "text": "build"
                    },
                    {
                      "text": " 操作，以及网络专有的 "
                    },
                    {
                      "code": true,
                      "text": "connect"
                    },
                    {
                      "text": " 操作等等"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "其他选项和参数"
                    },
                    {
                      "text": "：可通过 "
                    },
                    {
                      "code": true,
                      "text": "help"
                    },
                    {
                      "text": " 命令或 "
                    },
                    {
                      "code": true,
                      "text": "--help"
                    },
                    {
                      "text": " 查阅每个命令具体的选项和参数"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "由于部分命令很常用，Docker 还提供了方便的简写命令，例如显示当前所有容器 "
                },
                {
                  "code": true,
                  "text": "docker container ls"
                },
                {
                  "text": "，可以简写成 "
                },
                {
                  "code": true,
                  "text": "docker ps"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们首先复习一下容器（Container）对象上的命令吧（红色代表适用于所有对象的操作，蓝色代表此对象的专有操作）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/container-commands-squashed.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再复习一下镜像（Image）对象上的命令："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/image-commands-squashed.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后复习一下网络（Network）对象上的命令："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": ".tuture/assets/network-commands-squashed.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，这篇教程也结束了。但是我们的筑梦之旅才刚刚开始——还有很多问题没有解决：1）现在前端应用还无法在除了本地以外的环境使用（因为访问的后端 API 是硬编码的 "
                },
                {
                  "code": true,
                  "text": "localhost"
                },
                {
                  "text": "）；2）还没有真正部署到远程机器；3）MongoDB 还处于“裸奔”的状态（没设置密码）。不要方，我们在接下里的教程中就会去解决哦。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f81540ea93f63c9d1de865fe197cfa9d5375691c",
      "id": "cyydoNtj1",
      "articleId": "0X8ssR35",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f81540ea93f63c9d1de865fe197cfa9d5375691c",
          "id": "mkWs28UCX",
          "fixed": true,
          "children": [
            {
              "text": "Docker 数据管理概览"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好久不见，欢迎继续阅读“筑梦师系列” Docker 教程，前情回顾："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "text": "《一杯茶的时间，上手 Docker》",
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/442cc8d/"
                    },
                    {
                      "text": "中，我们以“工作”和“做梦”来类比“应用开发”和“部署”，并通过一些小实验让你理解 Docker 是如何实现从“做梦”到“筑梦”的跨越的，并且理解了"
                    },
                    {
                      "text": "镜像",
                      "bold": true
                    },
                    {
                      "text": "和"
                    },
                    {
                      "text": "容器",
                      "bold": true
                    },
                    {
                      "text": "两大关键概念，并成功地容器化了第一个应用"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "text": "《梦境亦相通：用 Network 实现容器互联》",
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/cd44c84/"
                    },
                    {
                      "text": "中，我们了解了”梦境“是相通的，不同的容器可以通过 Docker 网络实现相互之间的通信"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而在这一篇教程中，我们将带你上手 Docker 数据管理，搭建起”梦境“（容器环境）与”现实“（主机环境）的桥梁。Docker 数据的管理方式主要分为三种："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据卷",
                      "bold": true
                    },
                    {
                      "text": "（Volume），也是"
                    },
                    {
                      "text": "最为推荐的一种方式",
                      "bold": true
                    }
                  ],
                  "id": "46w_mFrb",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "绑定挂载",
                      "bold": true
                    },
                    {
                      "text": "（Bind Mount），Docker 早期常用的数据管理方式"
                    }
                  ],
                  "id": "46w_mFrb",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "tmpfs 挂载",
                      "bold": true
                    },
                    {
                      "text": "，基于内存的数据管理，"
                    },
                    {
                      "text": "本篇教程不会涉及",
                      "italic": true
                    }
                  ],
                  "id": "46w_mFrb",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "tmpfs 挂载",
                      "link": true,
                      "url": "https://docs.docker.com/storage/tmpfs/"
                    },
                    {
                      "text": "只适用于 Linux 操作系统。"
                    }
                  ],
                  "id": "46w_mFrb",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 4
                }
              ]
            },
            {
              "children": [
                {
                  "text": "我们马上通过几个小实验来体验一下（已经比较熟悉的同学可以直接移步下面的”实战演练“环节）。"
                }
              ]
            },
            {
              "children": [
                {
                  "text": "数据卷"
                }
              ],
              "type": "heading-three",
              "id": "HT3uCv0D"
            },
            {
              "children": [
                {
                  "text": "基本命令"
                }
              ],
              "type": "heading-four",
              "id": "nqhAWBv_"
            },
            {
              "children": [
                {
                  "text": "正如在"
                },
                {
                  "text": "上一篇",
                  "link": true,
                  "url": "https://tuture.co/2020/01/01/cd44c84/"
                },
                {
                  "text": "中最后“记住几十个 Docker 命令小诀窍”所提到的，"
                },
                {
                  "text": "数据卷（Volume）也是常见的 Docker 对象类型的一种",
                  "bold": true
                },
                {
                  "text": "，因此也支持 "
                },
                {
                  "text": "create",
                  "code": true
                },
                {
                  "text": "（创建）、"
                },
                {
                  "text": "inspect",
                  "code": true
                },
                {
                  "text": " （查看详情）、"
                },
                {
                  "text": "ls",
                  "code": true
                },
                {
                  "text": " （列出所有数据卷）、"
                },
                {
                  "text": "prune",
                  "code": true
                },
                {
                  "text": " （删除无用数据卷）和 "
                },
                {
                  "text": "rm",
                  "code": true
                },
                {
                  "text": "（删除）等操作。"
                }
              ],
              "type": "paragraph",
              "id": "a9rdciNB"
            },
            {
              "children": [
                {
                  "text": "我们来走一个流程体验一下。首先创建一个数据卷："
                }
              ],
              "type": "paragraph",
              "id": "a9rdciNB"
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker volume create my-volume"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "查看当前所有的数据卷："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker volume ls"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "输出了刚刚创建的 "
                },
                {
                  "text": "my-volume",
                  "code": true
                },
                {
                  "text": " 数据卷："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "local               my-volume"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "查看 "
                },
                {
                  "text": "my-volume",
                  "code": true
                },
                {
                  "text": " 数据卷的详细情况："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker volume inspect my-volume"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到输出了 JSON 格式的 "
                },
                {
                  "text": "my-volume",
                  "code": true
                },
                {
                  "text": "  信息："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Driver\": \"local\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Labels\": {},"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Mountpoint\": \"/var/lib/docker/volumes/my-vol/_data\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Name\": \"my-volume\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Options\": {},"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Scope\": \"local\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好奇的同学可能会去查看 "
                    },
                    {
                      "text": "/var/lib/docker/volumes",
                      "code": true
                    },
                    {
                      "text": " 目录下面是不是真的有数据卷，答案是：对于非 Linux 系统而言（Windows 和 Mac 系统），该目录不存在于你的文件系统中，而是存在于 Docker 虚拟机中。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后删除 "
                },
                {
                  "text": "my-volume",
                  "code": true
                },
                {
                  "text": " 数据卷："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker volume rm my-volume"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "单独创建一个数据卷意义不大，毕竟它本来的作用就是为容器的数据管理服务。请看下图（来源 "
                },
                {
                  "text": "Safari Books Online",
                  "link": true,
                  "url": "https://www.oreilly.com/library/view/continuous-delivery-with/9781787125230/8af8e5f4-66d5-4fe7-8709-2b5e1ae4acdf.xhtml"
                },
                {
                  "text": "）："
                }
              ]
            },
            {
              "type": "image",
              "url": ".tuture/assets/docker-volume-2cac2304fb49274f.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，数据卷在“主机环境”和“容器环境”之间架起了“一道桥梁”。通常，我们在容器中将需要存储的数据写入数据卷所挂载的路径（位置），然后就会立即、自动地将这些数据存储到主机对应的区域。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在创建带有数据卷的容器时，通常有两种选择：1）"
                },
                {
                  "text": "命名卷",
                  "bold": true
                },
                {
                  "text": "（Named Volume）；2）"
                },
                {
                  "text": "匿名卷",
                  "bold": true
                },
                {
                  "text": "（Anonymous Volume）。接下来我们就分别详细讲解。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "创建命名卷"
                }
              ],
              "id": "0d1ruljM"
            },
            {
              "children": [
                {
                  "text": "首先我们来演示一下如何创建带有命名卷的容器，运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -it -v my-vol:/data --name container1 alpine"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们通过 "
                },
                {
                  "text": "-v",
                  "code": true
                },
                {
                  "text": " （或者 "
                },
                {
                  "text": "--volume",
                  "code": true
                },
                {
                  "text": " ）参数指定了数据卷的配置为 "
                },
                {
                  "text": "my-vol:/data",
                  "code": true
                },
                {
                  "text": " ，其中（你应该猜到了）"
                },
                {
                  "text": "my-vol",
                  "code": true
                },
                {
                  "text": " 就是数据卷的名称，"
                },
                {
                  "text": "/data",
                  "code": true
                },
                {
                  "text": " 就是容器中数据卷的路径。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在进入容器中后，我们向 "
                },
                {
                  "text": "/data",
                  "code": true
                },
                {
                  "text": " 目录中添加一个文件后退出："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # touch /data/file.txt"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # exit"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "/ #",
                      "code": true
                    },
                    {
                      "text": " 是 alpine 镜像默认的命令提示符，后面的 "
                    },
                    {
                      "text": "touch /data/file.txt",
                      "code": true
                    },
                    {
                      "text": " 才是真正要执行的命令哦。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了验证 "
                },
                {
                  "text": "/data",
                  "code": true
                },
                {
                  "text": " 中的数据是否真的保存下来，我们删除 "
                },
                {
                  "text": "container1",
                  "code": true
                },
                {
                  "text": " 容器，然后再创建一个新的容器 "
                },
                {
                  "text": "container2",
                  "code": true
                },
                {
                  "text": " ，查看其中的 "
                },
                {
                  "text": "/data",
                  "code": true
                },
                {
                  "text": " 目录内容："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker rm container1"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -it -v my-vol:/data --name container2 alpine"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # ls /data"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "file.txt"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # exit"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到刚刚在 "
                },
                {
                  "text": "container1",
                  "code": true
                },
                {
                  "text": " 中创建的 "
                },
                {
                  "text": "file.txt",
                  "code": true
                },
                {
                  "text": " 文件！事实上，这种在"
                },
                {
                  "text": "容器之间共享数据卷",
                  "bold": true
                },
                {
                  "text": "的模式非常常见，Docker 提供了一个方便的参数 "
                },
                {
                  "text": "--volumes-from",
                  "code": true
                },
                {
                  "text": " 来轻松实现数据卷共享："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -it --volumes-from container2 --name container3 alpine"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/ # ls /data"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "file.txt"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样，"
                },
                {
                  "text": "container3",
                  "code": true
                },
                {
                  "text": " 中也能访问到数据卷中的内容。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "创建匿名卷"
                }
              ],
              "id": "VS9B9Uey"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "创建匿名卷的方式就很简单了，之前我们通过 "
                },
                {
                  "text": "my-vol:/data",
                  "code": true
                },
                {
                  "text": " 作为 "
                },
                {
                  "text": "-v",
                  "code": true
                },
                {
                  "text": " 的参数，而创建匿名卷只需省略数据卷名称（"
                },
                {
                  "text": "my-vol",
                  "code": true
                },
                {
                  "text": " 即可）："
                }
              ],
              "id": "cBJcDmSk"
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -v /data --name container4 alpine"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们通过 "
                },
                {
                  "text": "inspect",
                  "code": true
                },
                {
                  "text": " 命令来查看一下 "
                },
                {
                  "text": "container4",
                  "code": true
                },
                {
                  "text": " 的情况："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker inspect container4"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以在其中的 "
                },
                {
                  "text": "Mount",
                  "code": true
                },
                {
                  "text": " 字段中看到如下数据："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "json",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "\"Mounts\": ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Type\": \"volume\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Name\": \"dfee1d707956e427cc1818a6ee6060699514102e145cde314d4d938ceb12dfd3\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Source\": \"/var/lib/docker/volumes/dfee1d707956e427cc1818a6ee6060699514102e145cde314d4d938ceb12dfd3/_data\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Destination\": \"/data\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Driver\": \"local\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Mode\": \"\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"RW\": true,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        \"Propagation\": \"\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来分析一下重要的字段："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Name",
                      "code": true
                    },
                    {
                      "text": " 即数据卷的名称，由于是匿名卷，所以 "
                    },
                    {
                      "text": "Name",
                      "code": true
                    },
                    {
                      "text": " 字段就是一串长长的随机数，命名卷则为指定的名称"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Source",
                      "code": true
                    },
                    {
                      "text": " 为数据卷在主机文件系统中的存储路径（之前说了，Windows 和 Mac 在 Docker 虚拟机中）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Destination",
                      "code": true
                    },
                    {
                      "text": " 为数据卷在容器中的挂载点"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "RW",
                      "code": true
                    },
                    {
                      "text": " 指可读写（Read-Write），如果为 "
                    },
                    {
                      "text": "false",
                      "code": true
                    },
                    {
                      "text": " ，则为只读数据卷"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "在 Dockerfile 中使用数据卷"
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "jlFLK-7k"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 Dockerfile 中使用数据卷非常简单，只需通过 "
                },
                {
                  "text": "VOLUME",
                  "code": true
                },
                {
                  "text": " 关键词指定数据卷就可以了："
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "qhrZgAou"
            },
            {
              "type": "code-block",
              "lang": "dockerfile",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "VOLUME /data"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者通过 JSON 数组的方式指定多个数据卷"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "VOLUME [\"/data1\", \"/data2\", \"/data3\"]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有两点需要注意："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "只能创建"
                    },
                    {
                      "text": "匿名卷",
                      "bold": true
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "当通过 "
                    },
                    {
                      "text": "docker run -v",
                      "code": true
                    },
                    {
                      "text": " 指定数据卷时，Dockerfile 中的配置"
                    },
                    {
                      "text": "会被覆盖",
                      "bold": true
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "绑定挂载"
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "DVKRRrs0"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "绑定挂载（Bind Mount）是出现最早的 Docker 数据管理和存储解决方案，它的大致思路和数据卷是一致的，只不过是直接建立"
                },
                {
                  "text": "本机文件系统",
                  "bold": true
                },
                {
                  "text": "和"
                },
                {
                  "text": "容器文件系统",
                  "bold": true
                },
                {
                  "text": "之间的映射关系，非常适合简单、灵活地在本机和容器之间传递数据。"
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "H8YbD6d1"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以试着把自己机器的桌面（或者其他路径）挂载到容器中："
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "H8YbD6d1"
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker run -it --rm -v ~/Desktop:/desktop alpine"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们还是通过 "
                },
                {
                  "text": "-v",
                  "code": true
                },
                {
                  "text": " 参数来进行配置，"
                },
                {
                  "text": "~/Desktop",
                  "code": true
                },
                {
                  "text": " 是本机文件系统路径，"
                },
                {
                  "text": "/desktop",
                  "code": true
                },
                {
                  "text": " 则是容器中的路径，"
                },
                {
                  "text": "~/Desktop:/desktop",
                  "code": true
                },
                {
                  "text": " 则是将本机路径和容器路径进行绑定，仿佛架起了一道桥梁。这里的 "
                },
                {
                  "text": "--rm",
                  "code": true
                },
                {
                  "text": " 选项是指在容器停止之后自动删除（关于容器生命周期的更多细节，请参考"
                },
                {
                  "text": "第一篇文章",
                  "link": true,
                  "url": "https://tuture.co/2020/01/01/442cc8d/"
                },
                {
                  "text": "）。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进入到容器之后，可以试试看 "
                },
                {
                  "text": "/desktop",
                  "code": true
                },
                {
                  "text": " 下面有没有自己桌面上的东西，然后再在容器中创建一个文件，看看桌面上有没有收到这个文件："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/# ls /desktop"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 我自己桌面上的很多东西 :D"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "/# touch /desktop/from-container.txt"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你应该能看到自己的桌面上多了容器中创建的 "
                },
                {
                  "text": "from-container.txt",
                  "code": true
                },
                {
                  "text": " 文件！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "fxP9Sa5l"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们贴出官方文档这张示意图："
                }
              ]
            },
            {
              "type": "image",
              "url": ".tuture/assets/types-of-mounts-volume.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "children": [
                {
                  "text": "可以看到："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "children": [
                    {
                      "text": "数据卷（Volume）是 Docker 在本地文件系统中专门维护了一个区域用于存储容器数据"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "绑定挂载（Bind Mount）则是建立容器文件系统和本地文件系统的映射"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "tmpfs 则是直接在内存中管理容器数据"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "children": [
                {
                  "text": "在指定数据卷或绑定挂载时，"
                },
                {
                  "text": "-v",
                  "code": true
                },
                {
                  "text": " 参数的格式为 "
                },
                {
                  "text": "<first_field>:<second_field>:<rw_options>",
                  "code": true
                },
                {
                  "text": " （注意"
                },
                {
                  "text": "通过冒号分隔",
                  "bold": true
                },
                {
                  "text": "），包括三个字段，分别是："
                }
              ],
              "type": "paragraph",
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据卷名称或者本机路径，可省略（省略的话就是匿名卷）"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据卷在容器内的挂载点（路径），"
                    },
                    {
                      "text": "必填",
                      "bold": true
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "读写选项，默认是可读写，如果指定 "
                    },
                    {
                      "text": "ro",
                      "code": true
                    },
                    {
                      "text": " （Read-only），则为只读"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Docker 在 17.06 版本之后引入了 "
                    },
                    {
                      "text": "--mount",
                      "code": true
                    },
                    {
                      "text": " 参数，功能与 "
                    },
                    {
                      "text": "-v",
                      "code": true
                    },
                    {
                      "text": " / "
                    },
                    {
                      "text": "--volume",
                      "code": true
                    },
                    {
                      "text": " 参数几乎一致，通过键值对的方式指定数据卷的配置，更为冗长但也更清晰。这篇文章将详细讲解更为常见和普遍的 "
                    },
                    {
                      "text": "-v",
                      "code": true
                    },
                    {
                      "text": " 参数，"
                    },
                    {
                      "text": "--mount",
                      "code": true
                    },
                    {
                      "text": " 参数的更多使用可参考"
                    },
                    {
                      "text": "文档",
                      "link": true,
                      "url": "https://docs.docker.com/storage/volumes"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "file": "server/Dockerfile",
          "display": true,
          "commit": "f81540ea93f63c9d1de865fe197cfa9d5375691c",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "实战演练"
                    }
                  ],
                  "id": "MDzCrYTy"
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "准备工作和目标"
                    }
                  ],
                  "id": "lQ3wUOW1"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，终于到了实战演练环节——继续部署我们之前一直在做的全栈待办事项项目（React 前端 + Express 后端 + MongoDB 数据库）。如果你没有阅读之前的教程，想直接从这一步开始做起，请运行以下命令："
                    }
                  ],
                  "id": "coD0JCsq"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "git clone -b volume-start https://github.com/tuture-dev/docker-dream.git"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "cd docker-dream"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在之前项目的基础上，我们打算"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "存储和备份 Express 服务器输出的日志数据，而不是存储在”朝生暮死“的容器中"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "MongoDB 镜像已经做了数据卷配置，所以我们只需实践一波怎么备份和恢复数据"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "为 Express 服务器挂载数据卷"
                    }
                  ],
                  "id": "tG9qCU2F"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "OK，我们在 "
                    },
                    {
                      "text": "server/Dockerfile",
                      "code": true
                    },
                    {
                      "text": " 中添加 "
                    },
                    {
                      "text": "VOLUME",
                      "code": true
                    },
                    {
                      "text": " 配置，并且指定 "
                    },
                    {
                      "text": "LOG_PATH",
                      "code": true
                    },
                    {
                      "text": " （日志输出路径环境变量，可参考 "
                    },
                    {
                      "text": "server/index.js",
                      "code": true
                    },
                    {
                      "text": " 的源码）为 "
                    },
                    {
                      "text": "/var/log/server/access.log",
                      "code": true
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "server/Dockerfile",
              "commit": "f81540ea93f63c9d1de865fe197cfa9d5375691c",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  7,
                  15
                ],
                [
                  22,
                  26
                ]
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后 build 服务器镜像："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-server server/"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "稍等片刻后，我们把整个项目开起来："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 创建网络，便于容器互联"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker network create dream-net"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 启动 MongoDB 容器（dream-db）"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run --name dream-db --network dream-net -d mongo"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 启动 Express API 容器（dream-api）"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -p 4000:4000 --name dream-api --network dream-net -d dream-server"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 构建提供 React 前端页面的 Nginx 服务器"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker build -t dream-client client"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 启动 Nginx 服务器容器（client）"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -p 8080:80 --name client -d dream-client"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过 "
                    },
                    {
                      "text": "docker ps",
                      "code": true
                    },
                    {
                      "text": " 确保三个容器都已经开启："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": ".tuture/assets/docker-ps-vol-squashed.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "访问 "
                    },
                    {
                      "text": "localhost:8080",
                      "code": true
                    },
                    {
                      "text": " ，进入到待办事项页面，创建几个事项："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": ".tuture/assets/snapshot-vol-squashed.jpg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "日志数据的备份"
                    }
                  ],
                  "type": "heading-three",
                  "id": "tAjZITjE"
                },
                {
                  "children": [
                    {
                      "text": "之前我们把日志数据存储到了匿名卷中，由于直接获取数据卷中的数据是比较麻烦的，推荐的做法是通过创建一个新的临时容器，通过共享数据卷的方式来备份数据。听着有点晕？请看下图："
                    }
                  ],
                  "type": "paragraph",
                  "id": "qGHfmbiR"
                },
                {
                  "type": "image",
                  "url": ".tuture/assets/log-backup.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "按照以下步骤进行："
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "第一步，实现 "
                    },
                    {
                      "text": "dream-api",
                      "code": true
                    },
                    {
                      "text": " 容器和数据卷之间的数据共享（已实现）。"
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "第二步，创建临时容器，获取 "
                    },
                    {
                      "text": "dream-api",
                      "code": true
                    },
                    {
                      "text": " 的数据卷。运行以下命令："
                    }
                  ],
                  "type": "paragraph",
                  "id": "qGHfmbiR"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -it --rm --volumes-from dream-api -v $(pwd):/backup alpine"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面这句命令同时用到了上面讲解的数据卷和绑定挂载："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "--volumes-from dream-api",
                          "code": true
                        },
                        {
                          "text": " 用于容器之间共享数据卷，这里我们获取 "
                        },
                        {
                          "text": "dream-api",
                          "code": true
                        },
                        {
                          "text": " 的数据卷"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "-v $(pwd):/backup",
                          "code": true
                        },
                        {
                          "text": " 用于建立当前本机文件路径（"
                        },
                        {
                          "text": "pwd",
                          "code": true
                        },
                        {
                          "text": " 命令获取）和临时容器内 "
                        },
                        {
                          "text": "/backup",
                          "code": true
                        },
                        {
                          "text": " 路径的绑定挂载"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第三步，进入临时容器之后，我们把日志数据压缩成 tar 包放到 "
                    },
                    {
                      "text": "/backup",
                      "code": true
                    },
                    {
                      "text": " 目录下，然后退出："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "/ # tar cvf /backup/backup.tar /var/log/server/"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "tar: removing leading '/' from member names"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "var/log/server/"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "var/log/server/access.log"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "/ # exit"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "退出之后，是不是在当前目录看到了日志的备份 "
                    },
                    {
                      "text": "backup.tar",
                      "code": true
                    },
                    {
                      "text": " ？事实上，我们可以通过一条命令搞定："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -it --rm --volumes-from dream-api -v $(pwd):/backup alpine tar cvf /backup/backup.tar /var/log/server"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你觉得上面这条命令难以理解的话，答应我，一定要去仔细看看上一篇文章中的”回忆与升华“-”理解命令：梦境的主旋律“这一部分！"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "数据库备份与恢复"
                    }
                  ],
                  "id": "imab3MYN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下里就是这篇文章的重头戏，各位打起十二分的精神！我们的应用会不会遭遇删库跑路的危机全看你有没有学会这一节的操作技巧了！"
                    }
                  ],
                  "id": "FxC2P8UW"
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们这里使用 MongoDB 自带的备份与恢复命令（"
                        },
                        {
                          "text": "mongodump",
                          "code": true
                        },
                        {
                          "text": " 与 "
                        },
                        {
                          "text": "mongorestore",
                          "code": true
                        },
                        {
                          "text": " ），其他数据库（例如 MySQL）也有类似的命令，都可以借鉴本文的方式。"
                        }
                      ],
                      "id": "FxC2P8UW"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "备份思路一：临时容器+容器互联"
                    }
                  ],
                  "id": "yY-o94CI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照之前共享数据卷的思路，我们也尝试通过一个临时 Mongo 容器来备份数据。示意图如下："
                    }
                  ],
                  "id": "FxC2P8UW"
                },
                {
                  "type": "image",
                  "url": ".tuture/assets/db-backup-1.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "首先，我们的临时容器得连接上 "
                    },
                    {
                      "text": "dream-db",
                      "code": true
                    },
                    {
                      "text": " 容器，并配置好绑定挂载，命令如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -it --rm -v $(pwd):/backup --network dream-net mongo sh"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和之前备份日志数据相比，我们要把这个临时容器连接到 "
                    },
                    {
                      "text": "dream-net",
                      "code": true
                    },
                    {
                      "text": " 网络中，它才能访问到 "
                    },
                    {
                      "text": "dream-db",
                      "code": true
                    },
                    {
                      "text": " 的数据进行备份（不熟悉 Docker 网络的同学可复习"
                    },
                    {
                      "text": "前一篇文章",
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/cd44c84/"
                    },
                    {
                      "text": "）。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第二步，进入到这个临时容器后，运行 "
                    },
                    {
                      "text": "mongodump",
                      "code": true
                    },
                    {
                      "text": " 命令："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "/ # mongodump -v --host dream-db:27017 --archive --gzip > /backup/mongo-backup.gz"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此时，由于绑定挂载，输出到 "
                    },
                    {
                      "text": "/backup",
                      "code": true
                    },
                    {
                      "text": " 的文件将保存到当前目录（"
                    },
                    {
                      "text": "pwd",
                      "code": true
                    },
                    {
                      "text": "）中。退出后，就可以在当前目录下看到 "
                    },
                    {
                      "text": "mongo-backup.gz",
                      "code": true
                    },
                    {
                      "text": " 文件了。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "备份思路二：提前做好绑定挂载"
                    }
                  ],
                  "id": "I7BLJ1Dq"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在"
                    },
                    {
                      "text": "前一篇教程",
                      "link": true,
                      "url": "https://tuture.co/2020/01/01/cd44c84/"
                    },
                    {
                      "text": "的”回忆与升华“部分，我们轻描淡写地讲解了通过 "
                    },
                    {
                      "text": "docker exec",
                      "code": true
                    },
                    {
                      "text": " 执行 "
                    },
                    {
                      "text": "mongodump",
                      "code": true
                    },
                    {
                      "text": " 命令来做备份，但是当时输出的备份文件还是停留在容器中，只要容器被删除，备份文件也就消失了。于是一个很自然的想法就出现了：我们能不能在创建数据库容器的时候就做好绑定挂载，然后通过 "
                    },
                    {
                      "text": "mongodump",
                      "code": true
                    },
                    {
                      "text": " 把数据备份到挂载区域？"
                    }
                  ],
                  "id": "uJrVao-Z"
                },
                {
                  "type": "image",
                  "url": ".tuture/assets/db-backup-2.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "事实上，之前在创建数据库容器的时候，运行以下命令："
                    }
                  ],
                  "id": "uJrVao-Z"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run --name dream-db --network dream-net -v $(pwd):/backup -d mongo"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后再通过 "
                    },
                    {
                      "text": "docker exec",
                      "code": true
                    },
                    {
                      "text": " 执行 "
                    },
                    {
                      "text": "mongodump",
                      "code": true
                    },
                    {
                      "text": " 命令："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker exec dream-db sh -c 'mongodump -v --archive --gzip > /backup/mongo-backup.gz'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "就可以轻松实现。这里我们用 "
                    },
                    {
                      "text": "sh -c",
                      "code": true
                    },
                    {
                      "text": " 来执行一整条 Shell 命令（字符串形式），这样避免了重定向符 "
                    },
                    {
                      "text": ">",
                      "code": true
                    },
                    {
                      "text": " 引发的歧义（不理解的话可以把 "
                    },
                    {
                      "text": "sh -c 'xxx'",
                      "code": true
                    },
                    {
                      "text": " 替换成 "
                    },
                    {
                      "text": "xxx",
                      "code": true
                    },
                    {
                      "text": "）。可以看到，"
                    },
                    {
                      "text": "mongodump",
                      "code": true
                    },
                    {
                      "text": " 的命令简单了许多，我们再也不需要指定 "
                    },
                    {
                      "text": "--host",
                      "code": true
                    },
                    {
                      "text": " 参数，因为数据库就在本容器内。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "但是有个问题："
                    },
                    {
                      "text": "如果已经创建了数据库，并且没有提前做绑定挂载，这种方法就行不通了！",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "注意，这不是演习！"
                    }
                  ],
                  "id": "BAtH6T44"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有了数据库备份文件，我们就可以肆无忌惮地来做一波”演习“了。通过以下命令，直接端了目前的数据库和 API 服务器："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker rm -f --volumes dream-db"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker rm -f dream-api"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "没错，通过 "
                    },
                    {
                      "text": "--volumes",
                      "code": true
                    },
                    {
                      "text": " 开关，我们不仅把 "
                    },
                    {
                      "text": "dream-db",
                      "code": true
                    },
                    {
                      "text": " 容器删了，还顺带把挂载的数据卷全部删除！演习就是要足够逼真才行。这时候再访问 "
                    },
                    {
                      "text": "localhost:8080",
                      "code": true
                    },
                    {
                      "text": " ，之前的待办数据全部丢失！"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "开始灾后重建，让我们再次创建新的 "
                    },
                    {
                      "text": "dream-db",
                      "code": true
                    },
                    {
                      "text": " 容器："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run --name dream-db --network dream-net -v $(pwd):/backup -d mongo"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到，我们通过绑定挂载的方式把当前目录映射到容器的 "
                    },
                    {
                      "text": "/backup",
                      "code": true
                    },
                    {
                      "text": " 目录，这意味着可以在这个新的容器中通过 "
                    },
                    {
                      "text": "/backup/mongo-backup.gz",
                      "code": true
                    },
                    {
                      "text": " 来恢复数据，运行以下命令："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker exec dream-db sh -c 'mongorestore --archive --gzip < /backup/mongo-backup.gz'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们应该会看到输出了一些日志，提示我们数据恢复成功。最后重新开启 API 服务器："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "docker run -p 4000:4000 --name dream-api --network dream-net -d dream-server"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "回头访问我们的待办应用，数据是不是都回来了！？"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "回忆与升华"
                }
              ],
              "id": "s9bvBklU"
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "另一种共享数据的方式：docker cp"
                }
              ],
              "id": "XRQ_tXp3"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "之前，我们通过共享数据卷或者绑定挂载的方式来把容器的数据传送到容器之外。事实上，在容器和本机之间还可以通过另一种方式传递和共享数据："
                },
                {
                  "text": "docker cp",
                  "code": true
                },
                {
                  "text": " 命令。没错，如果你用过 "
                },
                {
                  "text": "cp",
                  "code": true
                },
                {
                  "text": " 命令拷贝文件，它的用法一定不会陌生。例如，我们将 "
                },
                {
                  "text": "dream-api",
                  "code": true
                },
                {
                  "text": " 容器内的日志文件拷贝到当前目录下："
                }
              ],
              "id": "LRmpwN-f"
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker cp dream-api:/var/log/server/access.log ."
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "看！"
                },
                {
                  "text": "access.log",
                  "code": true
                },
                {
                  "text": " 就有了！当然，我们还可以”反向操作“一波，把本地的文件拷贝到容器里面去："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker cp /path/to/some/file dream-api:/dest/path"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，"
                },
                {
                  "text": "docker cp",
                  "code": true
                },
                {
                  "text": " 用起来非常方便，很适合一次性的操作。缺陷也很明显："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "完全手动的数据管理"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "需要知道数据在容器中的具体路径，这对于反复迭代的应用来说很麻烦"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实现多个容器之间的数据共享比较繁琐"
                    }
                  ],
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "另一种备份恢复的方式：docker import/export"
                }
              ],
              "id": "g0vSiKqf"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在备份和恢复数据库时，有一个更加简单粗暴的思路：为什么我们不能直接备份整个容器呢？事实上，Docker 确实为我们提供了两个命令来搞定整个容器的打包和装载："
                },
                {
                  "text": "export",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "import",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ],
              "id": "QZYZwLSk"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "例如，通过以下命令将"
                },
                {
                  "text": "整个容器的文件系统",
                  "bold": true
                },
                {
                  "text": "导出为 "
                },
                {
                  "text": "tar",
                  "code": true
                },
                {
                  "text": " 包："
                }
              ],
              "id": "QZYZwLSk"
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker export my-container > my-container.tar"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "export",
                      "code": true
                    },
                    {
                      "text": " 命令"
                    },
                    {
                      "text": "不会导出",
                      "bold": true
                    },
                    {
                      "text": "容器相关数据卷的内容。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后可以通过 "
                },
                {
                  "text": "import",
                  "code": true
                },
                {
                  "text": " 命令创建拥有完全相同内容的"
                },
                {
                  "text": "镜像",
                  "bold": true
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "docker import my-container.tar"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "import",
                  "code": true
                },
                {
                  "text": " 命令会输出一个 SHA256 字符串，就是镜像的 UUID。接着可以用 "
                },
                {
                  "text": "docker run",
                  "code": true
                },
                {
                  "text": " 命令启动这个镜像（可以指定 SHA256 串，也可以先通过 "
                },
                {
                  "text": "docker tag",
                  "code": true
                },
                {
                  "text": " 打个标签）。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你刚刚尝试了 "
                },
                {
                  "text": "export",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "import",
                  "code": true
                },
                {
                  "text": " 命令，一定会发现一个相当严重的问题：容器打包之后的 tar 包有好几百兆。很显然，简单粗暴地打包容器也包括了很多根本无用的数据（例如操作系统中的其他文件），对硬盘的压力陡然增加。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "追本溯源：探寻镜像和容器的本质（UFS）"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在学习和实践了数据卷的知识后，我们还接触了一下 "
                },
                {
                  "text": "docker cp",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "docker export/import",
                  "code": true
                },
                {
                  "text": " 命令。至此，我们不禁追问，镜像和容器的本质到底是什么，其中的数据是怎样存储的？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "或者我们提一个更具体的问题："
                },
                {
                  "text": "为什么镜像中的数据（例如操作系统中的各种文件）每次创建容器时都会存在，而在创建容器后写入的数据会在容器删除后却丢失？",
                  "bold": true
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这背后的一切就是 Docker 赖以生存的 "
                },
                {
                  "text": "Union File System（UFS）",
                  "bold": true
                },
                {
                  "text": "机制。我们通过一张图（来源："
                },
                {
                  "text": "The Docker Ecosystem",
                  "link": true,
                  "url": "https://legacy.gitbook.com/book/washraf/the-docker-ecosystem/details"
                },
                {
                  "text": "）来大致感受一下："
                }
              ]
            },
            {
              "type": "image",
              "url": ".tuture/assets/ufs.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "children": [
                {
                  "text": "我们来一点点分析上面这张 UFS 示意图的要点："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "children": [
                    {
                      "text": "整个 UFS 都是由一层层的内容组成的，从底层的操作系统内核（Kernel），到上层的软件（例如 Apache 服务器）"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "UFS 中的每一层可分为"
                    },
                    {
                      "text": "只读层",
                      "bold": true
                    },
                    {
                      "text": "（read-only，也就是图中的"
                    },
                    {
                      "text": "不透明盒子",
                      "italic": true
                    },
                    {
                      "text": "）和"
                    },
                    {
                      "text": "可写层",
                      "bold": true
                    },
                    {
                      "text": "（writable，也就是图中的"
                    },
                    {
                      "text": "透明盒子",
                      "italic": true
                    },
                    {
                      "text": "）"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "镜像",
                      "bold": true
                    },
                    {
                      "text": "（例如图中的 add Apache 和 Busybox）由一系列"
                    },
                    {
                      "text": "只读层",
                      "bold": true
                    },
                    {
                      "text": "构成"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "当我们根据"
                    },
                    {
                      "text": "镜像",
                      "bold": true
                    },
                    {
                      "text": "创建"
                    },
                    {
                      "text": "容器",
                      "bold": true
                    },
                    {
                      "text": "时，就是在该镜像所有只读层之上加一层"
                    },
                    {
                      "text": "可写层",
                      "bold": true
                    },
                    {
                      "text": "，在容器中进行的任何数据的修改都会记录在这个可写层中，而不会影响到底下的只读层"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "children": [
                    {
                      "text": "当容器销毁后，在可写层中修改的所有内容将丢失"
                    }
                  ],
                  "type": "list-item",
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "children": [
                {
                  "text": "而我们这一篇文章所讲解的数据管理技巧（数据卷、绑定挂载），则是完全绕开了 UFS，让重要的业务数据独立存储，并且可备份、可恢复，而不是陷入在容器的可写层中让整个容器变得臃肿不堪。"
                }
              ],
              "type": "paragraph",
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "children": [
                {
                  "text": "再回过头看上面的问题，是不是有思路了？"
                }
              ],
              "type": "paragraph",
              "level": 0,
              "parent": "bulleted-list"
            }
          ],
          "flag": "step_end"
        }
      ]
    }
  ],
  "version": "v1",
  "remotes": [
    {
      "name": "origin",
      "refs": {
        "fetch": "https://github.com/tuture-dev/docker-dream.git",
        "push": "https://github.com/tuture-dev/docker-dream.git"
      }
    }
  ]
}